<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lulutia</title>
  <subtitle>有趣 是对一个人的至高评价</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://memory.lulutia.com/"/>
  <updated>2018-01-19T03:26:34.000Z</updated>
  <id>http://memory.lulutia.com/</id>
  
  <author>
    <name>lulutia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端基于vue-router的滚动位置记录(keep-alive)</title>
    <link href="http://memory.lulutia.com/2018/01/19/keep-alive/"/>
    <id>http://memory.lulutia.com/2018/01/19/keep-alive/</id>
    <published>2018-01-19T02:57:00.000Z</published>
    <updated>2018-01-19T03:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要对于如何在基于vue的移动端实现滚动位置记录进行了探讨。</p>
<a id="more"></a>
<p>在日常开发中，我们经常的会遇见与滚动位置记录相关的需求。多见于从列表页进入详情页，然后进行回退。对这种情况提炼出一套解决方案是相当有必要的。</p>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在日常开发中，我们经常的会遇见与滚动位置记录相关的需求。多见于从列表页进入详情页，然后进行回退。原因如下：</p>
<ul>
<li>在移动开发中，列表多是由无限滚动进行加载的，因此如果回退后又从头进行加载实际上用户体验是相当不好的</li>
<li>如果列表页的展现对实时性要求不高甚至长期不变，则回退后又进行的重新加载实际上是性能的浪费</li>
</ul>
<p>针对上面，在实际操作时更理想的情况是，对于实时性不高的列表，从列表页进入详情页又回退后，列表页会保存之前的位置。<br>在基于vue-router的项目中，为了实现上述效果可以使用其提供的keep-alive功能与scrollBehavior进行配合。</p>
<h4 id="keep-alive与scrollBehavior"><a href="#keep-alive与scrollBehavior" class="headerlink" title="keep-alive与scrollBehavior"></a>keep-alive与scrollBehavior</h4><ul>
<li>keep-alive: keep-alive是Vue内置的一个抽象组件，它自身不会渲染DOM元素也不会出现在父组件链中，它只是在包裹动态组件时会缓存不活动的组件实例，而不是销毁它们。<a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="external">更多使用方法详见Vue官方文档</a>。</li>
<li><p>scrollBehavior: scrollBehavior是由vue-router中Router实例提供的方法，它接受三个参数，分别为(to, from, savedPosition)，其中to和from是路由对象，而savedPosition是当 popstate导航(通过浏览器的 前进/后退 按钮触发)时记录的位置信息。</p>
<ul>
<li><p>scrollBehavior返回滚动位置的对象信息，如{ x: number, y: number}，如果返回的是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="external">falsy</a>或者空对象则不会发生滚动。</p>
</li>
<li><p>注意scrollBehavior只在HTML5 history模式下可用。</p>
</li>
</ul>
</li>
</ul>
<h4 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h4><ul>
<li>使用router-view配合keep-alive: 在入口文件通过v-if进行对特定页面的缓存。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-group"</span>&gt;</div><div class="line">  &lt;keep-alive&gt;</div><div class="line">    &lt;router-view class="view" v-if="$route.meta.keep_alive"&gt;&lt;/router-view&gt;</div><div class="line">  &lt;/keep-alive&gt;</div><div class="line">  &lt;router-view class="view" v-if="!$route.meta.keep_alive"&gt;&lt;/router-view&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>对路由进行配置，开启HTML5 history模式并配置scrollBehavior：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line"> 		<span class="attr">mode</span>: <span class="string">'history'</span>,</div><div class="line"> 		<span class="attr">scrollBehavior</span>: scrollBehavior,</div><div class="line"> 		routes</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>对路由进行配置，定制scrollBehavior方法，在这里会遇见以下几个问题：</p>
<ul>
<li><p>如何判断页面是否需要保留位置信息: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: constants.NAME,</div><div class="line">  <span class="attr">path</span>: constants.PATH,</div><div class="line">  <span class="attr">component</span>: <span class="built_in">module</span>,</div><div class="line">  <span class="attr">meta</span>: &#123;</div><div class="line">    <span class="attr">title</span>: constants.TITLE,</div><div class="line">    <span class="attr">val_cid</span>: constants.VAL_CID,</div><div class="line">    <span class="attr">requireAuth</span>: constants.REQUIRE_AUTH,</div><div class="line">    <span class="attr">keep_alive</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  constants</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们通过在路由上添加了一个参数keep_alive来声明当前路由是否要启动keep_alive的功能。</p>
</li>
<li><p>如何根据需要刷新页面，重新获取数据: 假如我们有三个页面，通过A进入B，通过B进入C。那么其中通过A进入B是需要进行数据刷新的；而从B进入C，再从C返回B则不需要进行数据刷新。因此针对同一个页面我们需要使用一种机制来判断多久需要数据刷新。<br>基本我们可以提炼出：通过<strong>跳转</strong>的是需要进行数据刷新的；而通过默认浏览器行为的是不需要进行浏览器刷新的。<br>看vue-router的源码中我们会发现下面的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, e =&gt; &#123;</div><div class="line">	.......</div><div class="line">    	this.transitionTo(location, route =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (supportsScroll) &#123;</div><div class="line">        handleScroll(router, route, current, <span class="literal">true</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</div><div class="line">  ...</div><div class="line">  this.transitionTo(location, route =&gt; &#123;</div><div class="line">    ...</div><div class="line">    handleScroll(<span class="keyword">this</span>.router, route, fromRoute, <span class="literal">false</span>)</div><div class="line">    ...</div><div class="line">  &#125;, onAbort)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码在处理popstate时调用的handleScroll方法传入的最后一个参数是true，但是自己重写的push、replace等函数调用handleScroll时传入的最后一个参数都是false。<br>而在scroll.js中，我们可以看到handleScroll函数的最后一个参数就是用来区分浏览器默认行为，和router-link的行为的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">const behavior = router.options.scrollBehavior</div><div class="line">......</div><div class="line">router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> position = getScrollPosition()</div><div class="line">   <span class="keyword">const</span> shouldScroll = behavior.call(router, to, <span class="keyword">from</span>, isPop ? position : <span class="literal">null</span>)</div><div class="line">......</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面一段代码中，我们可以看到，对于浏览器默认行为，调用自定义的scrollBehavior函数后传参的savedPosition为保存的position，对于跳转这种则传参的savedPosition为null。<br><strong>通过上面，我们已经能区分什么时候需要进行数据刷新了</strong>。之后，我们需要修改两部分的代码，一部分是scrollBehavior，修改它来根据不同的情况返回不同的滚动值；另外一部分是实际keep-alive的页面的渲染逻辑，它需要根据不同的情况来选择是否进行数据获取。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> scrollBehavior = <span class="function">(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">t</span> =&gt;</span> t.meta.keep_alive)) &#123;</div><div class="line">  	to.meta.saved_position = savedPosition; <span class="comment">// 传递这个值到具体页面来判断是否进行数据刷新</span></div><div class="line">    <span class="keyword">let</span> back = savedPosition ? savedPosition : &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">return</span> back;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">beforeRouteEnter: <span class="function"><span class="keyword">function</span>(<span class="params">to ,from, next</span>)</span>&#123;</div><div class="line">     next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">     	<span class="comment">// 通过对null的判断决定是否进行数据刷新</span></div><div class="line">       <span class="keyword">if</span> (to.meta.saved_position === <span class="literal">null</span>) &#123;</div><div class="line">         vm.initAll();</div><div class="line">       &#125;</div><div class="line">     &#125;)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里需要注意必须要在beforeRouteEnter的next里面进行调用，因为一般的生命周期钩子比如mounted等都会被keep-alive给吃掉。</p>
</li>
</ul>
</li>
</ul>
<h3 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h3><p>在实际使用中，其实上面这种做法会有问题。我们会发现，在A页面进行刷新，然后第一次从A进入B，又从B返回A的时候，并没有滚动到特定的位置。它滚动到了顶部。通过代码调试，我们可以看到，这一次返回的savedPosition为undefined，因此在判断back的时候会赋值{x: 0, y: 0}。</p>
<p>为了解决这个问题，我们需要手动记录一下滚动的位置。</p>
<p>在路由跳转的时候，如果from的是keep-alive的页面，则记录它的位置，并保存在路由上。之后通过浏览器行为进入这个页面的时候对位置进行判定，如果有就取这个值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> scrollBehavior = <span class="function">(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">t</span> =&gt;</span> t.meta.keep_alive)) &#123;</div><div class="line">    <span class="keyword">if</span> (savedPosition === <span class="literal">null</span>) &#123;</div><div class="line">      to.meta.saved_position = <span class="literal">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      savedPosition = to.meta.saved_position;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> back = savedPosition ? savedPosition : &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">return</span> back;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">	...</div><div class="line">	if (<span class="keyword">from</span>.meta.keep_alive) &#123;</div><div class="line">    <span class="keyword">from</span>.meta.saved_position = &#123;<span class="attr">x</span>: <span class="built_in">window</span>.pageXOffset, <span class="attr">y</span>: <span class="built_in">window</span>.pageXOffset&#125;;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>自此，可以解决这个问题。<br>那么我们接下来看下，为啥会出现undefined。在vue-router的代码中，有下面几段：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> position = getScrollPosition()</div><div class="line">   <span class="keyword">const</span> shouldScroll = behavior.call(router, to, <span class="keyword">from</span>, isPop ? position : <span class="literal">null</span>)</div><div class="line">......</div><div class="line"> &#125;)</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getScrollPosition</span> (<span class="params"></span>): ?<span class="title">Object</span> </span>&#123;</div><div class="line">  <span class="keyword">const</span> key = getStateKey()</div><div class="line">  <span class="keyword">if</span> (key) &#123;</div><div class="line">    <span class="keyword">return</span> positionStore[key]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，如果在调用getScrollPosition方法时，如果在positionStore里面没有找到对应当前key的数据，则会返回undefined。</p>
<p>那么为什么会没找到当前的key呢，因为刷新后，也就是当router进行初始化时，当前的路由状态并没有在history上进行注册，即window.history.state为null。此时，当在当前页面A进行滑动后跳转到其他页面B时，会将位置信息存储到positionStore上面，key为初始化的window.performance.now().toFixed(3)。此时，点击回退按钮，会触发popstate来获取A的信息。但是因为A的history state并没有注册。所以无法找到匹配的位置信息。</p>
<p>不过好的是现在这个问题已经被修复了，在<a href="https://github.com/vuejs/vue-router/releases/tag/v2.8.0" target="_blank" rel="external">2.8.0及其以上版本</a>中可以看到。修复思路就是在路由进行初始化的时候调用window.history.replaceState({ key: getStateKey() }, ‘’)来进行一个注册。具体见<a href="https://github.com/vuejs/vue-router/issues/1585" target="_blank" rel="external">链接</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.jianshu.com/p/fe238d8e7c6d" target="_blank" rel="external">vue-router 中使用 keep-alive 控制 ajax 请求的缓存策略(二)</a></li>
<li><a href="https://github.com/vuejs/vue-router/blob/dev/src/util/scroll.js" target="_blank" rel="external">vue-router dev分支源码</a></li>
<li><a href="https://github.com/vuejs/vue-router/issues/772" target="_blank" rel="external">scrollBehavior doesn’t store a scrolling position on the first page #772</a></li>
<li><a href="https://github.com/vuejs/vue-router/issues/1585" target="_blank" rel="external">scrollBehavior doesn’t work for initial route in Firefox #1585</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要对于如何在基于vue的移动端实现滚动位置记录进行了探讨。&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="vue" scheme="http://memory.lulutia.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期总结</title>
    <link href="http://memory.lulutia.com/2017/10/31/vuetimeline/"/>
    <id>http://memory.lulutia.com/2017/10/31/vuetimeline/</id>
    <published>2017-10-31T07:04:00.000Z</published>
    <updated>2017-10-31T07:34:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结了vue中涉及到的生命周期，并且通过实际尝试得出了其执行顺序。</p>
<a id="more"></a>
<p>在进行Vue项目开发的过程中，会不可避免的接触它的生命周期。了解每个生命周期的特性及其使用场景对于快速进行项目开发相当重要。</p>
<h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><p>一般基于Vue全家桶进行开发的项目都会采用vue-router来进行路由处理。在这种情况下，全局路由钩子将会是我们接触的生命周期第一站。这块主要涉及到以下两个方法：</p>
<ul>
<li><p>使用router.beforeEach注册一个全局前置守卫。直白的说就是当一个导航触发时，会按照顺序执行完毕此方法里的内容后再进行跳转[resolve后]。因此，在这个周期内特别适合做<strong>全局拦截</strong>，比如判断登陆状态。这个方法接受三个参数(from, to, next)，并且以调用next方法来作为resolve的标志。next方法可以传入以下几种参数：</p>
<ul>
<li>不传参数如next()：进行管道中的下一个钩子，执行完后成为resolve状态，进行正常跳转</li>
<li>传入具体的路径如next(‘/‘): 直接跳转到传入的地址，当前导航会被中断，进行新的导航</li>
<li>传入false如next(false): 中断当前导航，保持在当前的页面</li>
<li>传入error如next(error): error是一个Error实例，导航会被终止且该错误会被传递给router.onError()注册过的回调</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'router.beforeEach'</span>)</div><div class="line">  next()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>使用router.afterEach注册一个全局后置钩子，接受两个参数(from, to)。不接受next，也不改变导航状态</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'router.afterEach'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h3><p>按照正常思维来思考，当路由确定后就涉及到具体页面的渲染。因此这部分涉及到以下几个实例的生命周期：</p>
<ul>
<li>beforeCreate：这个阶段主要执行初始化。可以访问实例本身，但是因为实例的配置还没完成，因此<strong>访问data或者method都是没用的</strong>。</li>
<li>created：这个阶段已经进行了实例的配置，因此可以访问data、method和computed等了。但是因为挂载还没完成，所以<strong>直接访问this.$el是没用的</strong></li>
<li>beforeMount：这个阶段是在挂载开始之前执行，之后就会走正常的渲染逻辑</li>
<li>mounted：在这个阶段挂载已经完成，所以<strong>访问this.$el已经能够拿到元素了</strong></li>
<li>beforeDestroy：这个阶段在实例销毁之前调用，因为是之前，所以在这个阶段还能够访问实例本身</li>
<li>destroyed：这个阶段表示实例已经被销毁完成了。因此所有自己本身及其子组件的绑定，监听都会销毁</li>
</ul>
<p>上面是一个最基本的流程。加上前面的全局路由。我们可以看见其执行先后顺序如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline1.png" alt=""></p>
<p>通过上面的展示，我们得到注意点，在从A页面跳转到B页面时，<strong>A页面的beforeDestroy和destroyed方法是比全局路由的beforeEach和afterEach执行的晚的</strong>。</p>
<p>除了上面一个最基本的流程外，还有一个很重要的环节就是<strong>更新</strong>。关于这个，有下面两个生命周期阶段：</p>
<ul>
<li>beforeUpdate：数据更新时调用，发生在virtual dom进行对比和渲染之前。因此在这个阶段继续更改数据不会触发重新的渲染。但是这里有几个需要注意的地方如下：<ul>
<li>如果只是单纯的数据变化，而这个变化并没有在template里面使用，则这个函数也不会触发。</li>
<li>在beforeUpdate里面进行的数据更新，如果与之前的一样，则virtual dom对比结果为一样，此时不会重新触发beforeUpdate和updated；如果不一样，则会触发beforeUpdate和updated，但实际updated时更新的数据为后面的，证明在这个阶段继续更改数据不会触发重新的渲染；但是如果这个阶段的数据更新是异步的，比如延迟一秒更新，实际updated会触发两次并且数据不一样，表明触发了新的绘制</li>
<li>在beforeUpdate里面重复修改同一个数据可能导致beforeUpdate函数的无限循环，应尽量避免</li>
</ul>
</li>
<li>updated：virtual dom重新渲染和打补丁之后调用。所以如果在这个阶段再进行数据的更改会又重新触发beforeUpdate，恰巧如果beforeUpdate里面有同一数据的修改则很容易导致无限循环，所以最好避免这种事情发生。这个环节后，可以使用更新后的dom。</li>
</ul>
<p>在添加了上面两个方法后，现在我们可以看其执行顺序如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline02.png" alt=""></p>
<h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><p>根组件的基本生命周期探讨到一阶段了，因为现在都是组件化的思维，因此现在很自然的就会想到子组件的生命周期在全局是处于何种位置的。<br>与根组件一样，子组件也拥有beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed这几个生命阶段。现在我们来看在<strong>不执行更新操作</strong>时的执行顺序：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline03.png" alt=""></p>
<p>由上可知:</p>
<ul>
<li>子组件的初始化晚于根组件，但是其挂载早于根组件，即当子组件都mounted后，根组件才会mounted。具体子组件的beforeCreated时间是在根组件的beforeMount之后</li>
<li>子组件的销毁开始时间也晚于根组件，但是只有当子组件都destroyed后，根组件才destroyed了</li>
</ul>
<p>那加上更新操作时会怎样呢？我们构造了一个子组件，将根组件的msg作为props传入进去，然后根据这个prop构造一个计算属性，来作为子组件的template中的一个参数。注意这里一定要使用计算属性，如果直接使用data的话，是不会更新的：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;smallcomponent :msg="msg"/&gt;</div><div class="line">..........HelloWorld.vue.........</div><div class="line"> &lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123;componentInfo&#125;&#125;&lt;/h1&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">...</div><div class="line"> props: &#123;</div><div class="line">      msg: &#123;</div><div class="line">        type: String</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      componentInfo () &#123;</div><div class="line">        return this.msg</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">..........Time.vue........</div></pre></td></tr></table></figure>
<p>在上面这种情况下，我们可以得出其生命周期如下，很明显，根组件是在子组件更新完毕后才更新完毕的：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/time04.png" alt=""></p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>除了上面所说的子组件，根组件里面可能还会有指令存在，总的来说指令也会有其对应的生命周期，如下来自<a href="https://cn.vuejs.org/v2/guide/custom-directive.html#main" target="_blank" rel="external">vue官方文档</a>：</p>
<ul>
<li>bind：只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作</li>
<li>inserted：被绑定元素插入父节点时调用 (父节点存在即可调用，不必存在于 document 中)</li>
<li>update：所在组件的VNode更新时调用，但是可能发生在其孩子的VNode更新之前</li>
<li>componentUpdated：所在组件的VNode及其孩子的VNode全部更新时调用</li>
<li>unbind：只调用一次，指令与元素解绑时调用</li>
</ul>
<p>我们实现了一个指令，将根组件的msg作为值传入指令中，在最基本的状态下，他们的生命周期流程如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline05.png" alt=""></p>
<p>看来指令和子组件的状态十分类似，也是在根组件beforeMount后进行bind与inserted，然后根组件才执行mounted；在解绑时，也是在根组件beforeDestroy后执行，执行完后根组件才可能执行destroyed</p>
<p>同样，如果这时，加上更新操作，其生命流程会如下所示，很明显，根组件是在指令更新完毕后才更新完毕的：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline06.png" alt=""></p>
<p>之前我们单独的讨论了子组件和指令，那么如果它们在一起时生命周期的顺序又是怎样呢？通过实际实验，我们得出其顺序如下，当我们在根组件里先引入子组件再引入指令时其顺序如下左图，当我们先引人指令再引人子组件时其顺序如下右图：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline09.png" alt=""></p>
<p>很明显，这个顺序是和引人组件或者指令的先后顺序有关～</p>
<ul>
<li>销毁阶段谁先引入谁先销毁</li>
<li>更新阶段，都是指令的更新靠前</li>
<li>创建阶段，谁先引入谁先进行初始化，但总的来说挂载都在初始化之后[无论谁的初始化]</li>
</ul>
<h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><p>在前面我们已经讨论过全局守卫、根组件、子组件和指令了。但实际上对于组件而言，它还存在组件内的守卫，<a href="https://router.vuejs.org/zh-cn/advanced/navigation-guards.html" target="_blank" rel="external">如下</a>：</p>
<ul>
<li>beforeRouteEnter：在渲染该组件的对应路由被 confirm 前调用，<strong>不能</strong>获取组件实例 this，因为当守卫执行前，组件实例还没被创建</li>
<li>beforeRouteUpdate：在当前路由改变，但是该组件被复用时调用，可以访问组件实例this</li>
<li>beforeRouteLeave：导航离开该组件的对应路由时调用，可以访问组件实例this</li>
</ul>
<p>我们在根组件添加了以上几个方法，可以看见整个生命周期如下所示：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline10.png" alt=""></p>
<p>由上可知，beforeRouteEnter是在全局守卫之后调用，而beforeRouteLeave是在全局守卫之前调用。上面我们说到在beforeRouteEnter阶段是没法访问到this的，为了解决这个问题，可以通过传一个回调给next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'beforeRouteEnter'</span>)</div><div class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'beforeRouteEnter的next'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>那么这个的触发又是在生命周期的那一环呢？</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline11.png" alt=""></p>
<p>很明显它会在完成mounted后马上触发。所以虽然beforeRouteEnter的执行时间很早，但是它的回调执行的时间比较晚，算是最接近dom渲染的一个周期了</p>
<h3 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h3><p>除了上面我们讨论的全局守卫和组件内的守卫，实际还有一个路由独享的守卫，即可以在路由配置上直接定义beforeEnter守卫。具体使用如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'Hello'</span>,</div><div class="line">      <span class="attr">component</span>: HelloWorld,</div><div class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Exclusive beforeEnter'</span>)</div><div class="line">        next()</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/world'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'World'</span>,</div><div class="line">      <span class="attr">component</span>: Page2</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>通过实际情况我们可以得知，这个方法的调用会在全局守卫的beforeEach之后，而在组件内守卫的beforeRouteEnter之前，如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline12.png" alt=""></p>
<h3 id="Vue-nextTick-amp-vm-nextTick"><a href="#Vue-nextTick-amp-vm-nextTick" class="headerlink" title="Vue.nextTick &amp; vm.$nextTick"></a>Vue.nextTick &amp; vm.$nextTick</h3><p>除了上面讨论的，还有两个和生命周期有关系的方法，如下：</p>
<ul>
<li><a href="https://cn.vuejs.org/v2/api/index.html#Vue-nextTick" target="_blank" rel="external">Vue.nextTick</a>：这是个全局API，在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM</li>
<li><a href="https://cn.vuejs.org/v2/api/index.html#vm-nextTick" target="_blank" rel="external">vm.$nextTick</a>: 将回调延迟到下次DOM更新循环之后执行。在修改数据之后立即使用它，然后等待DOM更新。它跟全局方法Vue.nextTick一样，不同的是回调的this自动绑定到调用它的实例上</li>
</ul>
<p>我们将这部分加上去，得到整个这篇文章探讨的生命周期过程如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/timeline13.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js官方文档</a></li>
<li><a href="https://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">vue-router官方文档</a></li>
<li><a href="https://segmentfault.com/a/1190000008879966" target="_blank" rel="external">vue生命周期探究（一）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结了vue中涉及到的生命周期，并且通过实际尝试得出了其执行顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="vue" scheme="http://memory.lulutia.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>基于IntersectionObserver的曝光统计测试</title>
    <link href="http://memory.lulutia.com/2017/10/18/IntersectionObserve/"/>
    <id>http://memory.lulutia.com/2017/10/18/IntersectionObserve/</id>
    <published>2017-10-18T09:23:00.000Z</published>
    <updated>2017-10-18T09:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了IntersectionObserver API，并且就如何将其用于数据埋点给出了尝试。</p>
<a id="more"></a>
<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>  作为一款产品，往往希望能得到用户的反馈，从而通过对用户行为的分析进行功能、交互等方方面面的改进。然而直接的一对一的用户交流是低效且困难的，因此最普遍的做法便是通过数据埋点来反推用户的行为。那么数据埋点中很重要的一环便是：曝光。<br>  所谓曝光，便是页面被展示的时候进行打点。举个简单的例子：用户进入分类页面，商品以行为单位从上而下进行排列。当用户滚动页面时，之前不在视窗范围内的商品就会出现，此时，这部分商品就算曝光了。需要进行一次记录。<br>  那么为了实现上面功能，最普遍的做法有两个。其一：跟踪滚动事件，然后计算某个商品与视窗的相对位置，从而判断是否可见。其二：维持一个timer，然后以固定的时间为间隔计算某个商品与视窗的相对位置。<br>  上面两种做法在某种程度上能够实现我们的目的，但是会有一些问题，比如最明显的：慢。因为计算相对位置时会调用getBoundingClientRect()，这个操作会导致浏览器进行全页面的重新布局，不用我说，大家都知道这个性能开销是很大的，特别是在频繁进行时。除此之外，如果页面是作为一个iframe包裹的也会产生问题，因为同源策略和浏览器不会允许你获取包裹iframe的页面的数据。然而在现有情况下，很多广告都是通过iframe的形式镶嵌在网页内的。<br>  基于以上的情况，我们急需一种性能良好且iframe友好的方式来实现曝光的功能，因此IntersectionObserver API进入了我们的视野。</p>
<h4 id="IntersectionObserver-API介绍"><a href="#IntersectionObserver-API介绍" class="headerlink" title="IntersectionObserver API介绍"></a>IntersectionObserver API介绍</h4><p>关于IntersectionObserver API的官方文档<a href="https://w3c.github.io/IntersectionObserver/" target="_blank" rel="external">见此</a>。截止本文为止，其兼容性如下图所示:<br><img src="http://okzzg7ifm.bkt.clouddn.com/IntersectionObserver.png" alt="API 兼容性">简单的说IntersectionObserver让你知道什么时候observe的元素进入或者存在在root区域里了。下面我们来看下这个API的具体内容:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用构造函数生成观察者实例，回调函数是必须的，后面的配置对象是可选的</span></div><div class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">changes</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> change <span class="keyword">of</span> changes) &#123;</div><div class="line">    <span class="built_in">console</span>.log(change.time);               <span class="comment">// 相交发生时经过的时间</span></div><div class="line">    <span class="built_in">console</span>.log(change.rootBounds);         <span class="comment">// 表示发生相交时根元素可见区域的矩形信息，是一个对象值</span></div><div class="line">    <span class="built_in">console</span>.log(change.boundingClientRect); <span class="comment">// target.boundingClientRect()发生相交时目标元素的矩形信息，也是个对象值</span></div><div class="line">    <span class="built_in">console</span>.log(change.intersectionRect);   <span class="comment">// 根元素与目标元素相交时的矩形信息</span></div><div class="line">    <span class="built_in">console</span>.log(change.intersectionRatio);  <span class="comment">// 表示相交区域占目标区域的百分比，是一个0到1的值</span></div><div class="line">    <span class="built_in">console</span>.log(change.target);             <span class="comment">// 相交发生时的目标元素</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">	<span class="attr">root</span>: <span class="literal">null</span>,</div><div class="line">  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>],</div><div class="line">  	<span class="attr">rootMargin</span>: <span class="string">"50px"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 实例属性</span></div><div class="line">observer.root</div><div class="line"></div><div class="line">observer.rootMargin</div><div class="line"></div><div class="line">observer.thresholds</div><div class="line"></div><div class="line"><span class="comment">// 实例方法</span></div><div class="line">observer.observe(target); <span class="comment">// 观察针对某个特定元素的相交事件</span></div><div class="line"></div><div class="line">observer.unobserve(target); <span class="comment">// 停止对某个特定元素的相交事件的观察</span></div><div class="line"></div><div class="line">observer.disconnect(); <span class="comment">// 停止对所有目标元素的阈值事件的观察，简单的说就是停用整个IntersectionObserver</span></div><div class="line"></div><div class="line"><span class="comment">// 除了上面三个实例方法，还有一个takeRecords()的方法，之后会详细介绍</span></div></pre></td></tr></table></figure>
<p>IntersectionObserver API允许开发人员了解目标dom元素相对于intersection root的可见性。这个root可以通过实例属性获取。默认情况下它为null，此时它不是真正意义上的元素，它指视窗范围，因此只要视窗范围内的目标元素(当然是后代元素)滚入视窗时，就会触发回调函数[如果root元素不存在了，则执行其任何的observe都会出错]。下面举个栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 500px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的栗子中，当红色的块滚入滚出视窗，都会触发回调函数，回调函数在调用时会传入一个由IntersectionObserverEntry 对象组成的数组。每个IntersectionObserverEntry 对象包含对应的observed元素的更新信息，大概数据结构如下，其具体意思在第一段代码里有详细说明:<br><img src="http://okzzg7ifm.bkt.clouddn.com/intersectionObject.png" alt=""><br>我们可以在配置对象中将root改为具体的元素，此时当目标元素出现在root元素中时会触发回调，注意，在这种情况下相交可能发生在视窗下面。具体代码在下，感兴趣的孩子可以试一下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#root</span> &#123;</div><div class="line">				<span class="attribute">position</span>: relative;</div><div class="line">				<span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="built_in">calc</span>(100vh + 200px);</div><div class="line">				<span class="attribute">background</span>: lightblue;</div><div class="line">				<span class="attribute">overflow</span>: scroll;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: absolute;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 800px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">root</span>: root</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面一条中，回调函数打印出来的对象中有一个intersectionRatio值，这个值其实涉及到了整个API的核心功能：当目标元素和根元素相交的面积占目标元素面积的百分比到达或跨过某些指定的临界值时就会触发回调函数。因此相对的在配置对象里有一个threshold来对这个百分比进行配置，默认情况下这个值是[0]，注意里面的值不能在0-1之外，否则会报错。我们举个栗子如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">let ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">	<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">  		<span class="built_in">console</span>.log(entries);</div><div class="line">  &#125;, &#123;</div><div class="line">  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">  &#125;</div><div class="line">);</div><div class="line"></div><div class="line">ele.observe(target);</div></pre></td></tr></table></figure>
<p>在上面这个栗子中，我们设定了0，0.5，1.0这三个值，因此当交叉区域跨越0，0.5，1.0时都会触发回调函数。注意我这边的用词是跨越，而不是到达。因为会存在以下两种情况导致回调打印出来的intersectionRatio不为0，0.5和1.0.<br>其一： 浏览器对相交的检测是有时间间隔的。浏览器的渲染工作都是以帧为单位的，而IntersectionObserver是发生在帧里面的。因此假如你设定了[0,0.1,0.2,0.3,0.4,0.5]这个threshold，但是你的滚动过程特别快，导致所有的绘制在一帧里面结束了，此时回调只会挑最近的临界值触发一次。<br>其二： IntersectionObserver是异步的。在浏览器内部，当一个观察者实例观察到众多的相交行为时，它不会立即执行。关于IntersectionObserver的草案里面写明了其实现是基于requestIdleCallback()来异步的执行我们的回调函数的，并且规定了最大的延迟时间是100ms。关于这部分涉及到前面第一段代码里的一个实例方法takeRecords()。如果你很迫切的希望马上知道是否有相交，你不希望等待可能的100ms，此时你就能调用takeRecords()，此后你能马上获得包含IntersectionObserverEntry 对象的数组，里面有相交信息，如果没有任何相交行为发生，则返回一个空数组。但这个方法与正常的异步回调是互斥的，如果它先执行了则正常回调里面就没信息了，反之亦然。<br>除开上面的问题，如果目标元素的面积为0会产生什么情况呢？因为与0计算相交率是没有意义的，实际我们举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 500px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(img);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们会看到，虽然我们设定了0.5这个阈值，但实际回调只会在0与1.0时触发。这是一种特殊的处理方式。</p>
<p>上面我们讨论了整个API的核心功能，实际其内部遵循的逻辑如下: 每个观察者实例为所有的目标元素都维护着上次的相交率(previousThreshold)，在新执行Observe的时候会将previousThreshold置为0，之后每次检测到满足threshold的相交率，并且与previousThreshold不同，那么就会触发回调并将previousThreshold重置为这个新值。那么这里可能会有下面几个问题：<br>其一：既然初始值是0，如果阈值设置为0，且刚刚满足滚动到0的位置，回调还会触发吗？实际是会的，这是一种特例，与目标元素在根元素内部(此时相交率为1)滚动到刚刚要超出的位置依然会触发回调函数一样。但是这种情况可能导致一个问题，我们无法直接用intersectionRatio&gt;0来判断目标是否滚入了根元素，因为在慢速滚动下，当目标元素的上边与根元素的下边相交时，此时intersectionRatio=0并且触发了回调，之后当intersectionRatio&gt;0时并不会触发回调了(这里排除还有其他自定义阈值的情况)。这种情况下，可以自定义一个变量值来存展示状态，或者也可以定义一个无限接近0的threshold.<br>其二：如果一个元素初始化就在根元素内部了，然后再执行observe，依然会触发回调吗？会的，因为初始值默认为0，在下一次检测时更新为了实际的相交值。</p>
<p>这里需要强调一点的是，我们的目标元素在Observe的时候可以不存在的[注意这里的不存在是指没有插入dom结构，但是元素本身是需要存在的]，只需要在相交发生时存在就行了，我们来举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 500px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			<span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">			ele.observe(img);</div><div class="line">			setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">				<span class="built_in">document</span>.body.appendChild(img);</div><div class="line">			&#125;, <span class="number">5000</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同理，如果目标元素与根元素处于相交状态，但是在一段时间后目标元素不存在了(比如remove，或者display:none)了，那么此时依然会触发一次回调。但是如果本身就不处于相交状态，然后消失掉了，因为0-&gt;0没有变化，所以不会触发回调，具体如下面的栗子所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 500px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">			setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">				<span class="built_in">document</span>.body.removeChild(target);</div><div class="line">			&#125;, <span class="number">5000</span>);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="IntersectionObserver-API与iframe"><a href="#IntersectionObserver-API与iframe" class="headerlink" title="IntersectionObserver API与iframe"></a>IntersectionObserver API与iframe</h4><p>互联网上的很多小广告都是通过iframe嵌入的，而上面我们也说了现有的情况下很难获取iframe在顶层视窗内的曝光，但是使用IntersectionObserver API我们却可以做到这点。下面举个栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#root</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 800px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-id">#iframe</span> &#123;</div><div class="line">				<span class="attribute">width</span>: <span class="number">600px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">				<span class="attribute">margin-bottom</span>: <span class="number">300px</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">  			<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></div><div class="line">		  let iframeTemplate = `</div><div class="line">		    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>i am iframe<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">		      <span class="selector-id">#target</span> &#123;</div><div class="line">		        <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">		        <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">		        <span class="attribute">background</span>: red;</div><div class="line">		      &#125;</div><div class="line">		      <span class="selector-id">#target</span> <span class="selector-tag">p</span> &#123;</div><div class="line">		      	<span class="attribute">font-size</span>: <span class="number">90px</span>;</div><div class="line">		      &#125;</div><div class="line">		    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		      <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">		        <span class="built_in">console</span>.log(entries)</div><div class="line">		      &#125;, &#123;</div><div class="line">		      	<span class="attr">threshold</span>: [<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">1.0</span>]</div><div class="line">		      &#125;)</div><div class="line">		      observer.observe(target)</div><div class="line">		    &lt;\/script&gt;<span class="string">`</span></div><div class="line"></div><div class="line">		  iframe.src = URL.createObjectURL(new Blob([iframeTemplate], &#123;"type": "text/html"&#125;))</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的栗子可以看出，使用此API不仅能够使iframe在视窗内出现时触发回调，而且threshold值同样能够起作用。这样一来，大大简化了此类情况下获取曝光的难度。</p>
<h4 id="延迟加载与无限滚动"><a href="#延迟加载与无限滚动" class="headerlink" title="延迟加载与无限滚动"></a>延迟加载与无限滚动</h4><p>上面我们关于配置参数已经提到了root和threshold，实际上还有一个值：rootMargin。这个值实际就是给根元素添加了一个假想的margin值。其使用场景最普遍的是用于延迟加载。因为如果真的等目标元素与根元素相交的时候再进行加载图片等功能就已经晚了，所以有一个rootMargin值，这样等于根元素延伸开去了，目标元素只要与延伸部分相交就会触发回调，下面我们来继续举个栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>intersectionObserve<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">			<span class="selector-id">#root</span> &#123;</div><div class="line">				<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">				<span class="attribute">height</span>: <span class="number">800px</span>;</div><div class="line">				<span class="attribute">overflow</span>: scroll;</div><div class="line">				<span class="attribute">background-color</span>: pink;</div><div class="line">			&#125;</div><div class="line">			<span class="selector-id">#target</span> &#123;</div><div class="line">			   <span class="attribute">position</span>: relative;</div><div class="line">			   <span class="attribute">top</span>: <span class="built_in">calc</span>(100vh + 500px);</div><div class="line">			   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">			   <span class="attribute">background</span>: red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">let</span> ele = <span class="keyword">new</span> IntersectionObserver(</div><div class="line">				<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">			  		<span class="built_in">console</span>.log(entries);</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	<span class="attr">rootMargin</span>: <span class="string">'100px'</span>,</div><div class="line">			  	<span class="attr">root</span>: root</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line"></div><div class="line">			ele.observe(target);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很明显，在上面的栗子中，目标元素并没有出现在根元素的视窗里的时候就已经触发回调了。</p>
<p>整个API可以用来实现无限滚动和延迟加载，下面就分别举出两个简单的栗子来启发思路，更完善健壮的功能就交给看官自己去尝试了哦：<br>延迟加载的栗子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="utf-8" /&gt;</div><div class="line">		&lt;title&gt;intersectionObserve&lt;/title&gt;</div><div class="line">		&lt;style type="text/css"&gt;</div><div class="line">			.img &#123;</div><div class="line">				height: 1000px;</div><div class="line">				overflow-y: hidden;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;ul&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/cat.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/01.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/virtualdom.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="" class="img-item" data-src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			let ele = new IntersectionObserver(</div><div class="line">				(entries) =&gt; &#123;</div><div class="line">			  		entries.forEach((entry) =&gt; &#123;</div><div class="line">			  			if (entry.intersectionRatio &gt; 0) &#123;</div><div class="line">			  				entry.target.src = entry.target.dataset.src;</div><div class="line">			  			&#125;</div><div class="line">			  		&#125;)</div><div class="line">			  &#125;, &#123;</div><div class="line">			  	rootMargin: '100px',</div><div class="line">			  	threshold: [0.000001]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line">			let eleArray = Array.from(document.getElementsByClassName('img-item'));</div><div class="line">			eleArray.forEach((item) =&gt; &#123;</div><div class="line">				ele.observe(item);</div><div class="line">			&#125;)</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>无限滚动的栗子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="utf-8" /&gt;</div><div class="line">		&lt;title&gt;intersectionObserve&lt;/title&gt;</div><div class="line">		&lt;style type="text/css"&gt;</div><div class="line">			.img &#123;</div><div class="line">				height: 1200px;</div><div class="line">				overflow: hidden;</div><div class="line">			&#125;</div><div class="line">			#flag &#123;</div><div class="line">				height: 20px;</div><div class="line">				background-color: pink;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;ul id="imgContainer"&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/cat.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/01.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/virtualdom.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">			&lt;li class="img"&gt;</div><div class="line">				&lt;img src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png"/&gt;</div><div class="line">			&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">		&lt;div id="flag"&gt;&lt;/div&gt;</div><div class="line">		&lt;script type="text/javascript"&gt;</div><div class="line">			let imgList = [</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/immutable-coperation.png',</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/flexdirection.png',</div><div class="line">				'http://okzzg7ifm.bkt.clouddn.com/immutable-exampleLayout.png'</div><div class="line">			]</div><div class="line">			let ele = new IntersectionObserver(</div><div class="line">				(entries) =&gt; &#123;</div><div class="line">					if (entries[0].intersectionRatio &gt; 0) &#123;</div><div class="line">						if (imgList.length) &#123;</div><div class="line">							let newImgli = document.createElement('li');</div><div class="line">							newImgli.setAttribute("class", "img");</div><div class="line">							let newImg = document.createElement('img');</div><div class="line">							newImg.setAttribute("src", imgList[0]);</div><div class="line">							newImgli.appendChild(newImg);</div><div class="line">							document.getElementById('imgContainer').appendChild(newImgli);</div><div class="line">							imgList.shift();</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">			  &#125;, &#123;</div><div class="line">			  	rootMargin: '100px',</div><div class="line">			  	threshold: [0.000001]</div><div class="line">			  &#125;</div><div class="line">			);</div><div class="line">			ele.observe(flag);</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>通篇看下来大家是不是感觉这个API还是很好玩的，然而因为其兼容性，所以使用区域还是受限的。基于此，规范制订者在github上发布了其<a href="https://github.com/w3c/IntersectionObserver" target="_blank" rel="external">Polyfill</a>，不过因为是Polyfill，所以在实现性能上肯定是比不上原生的。而且就其github来看，待解决的issue数量还是比较多的。</p>
<h4 id="具体集成到项目中【项目本身基于vue】"><a href="#具体集成到项目中【项目本身基于vue】" class="headerlink" title="具体集成到项目中【项目本身基于vue】"></a>具体集成到项目中【项目本身基于vue】</h4><p>实际项目里面可能需要使用到曝光的地方相当的多，这里我们就首页进行了尝试，主要有以下几个问题需要解决：</p>
<ul>
<li>实例的创建时间</li>
<li>observe()调用的时机</li>
<li>dom元素与埋点数据的关联</li>
</ul>
<p>针对实例的创建时间，因为首页上需要划分区域进行曝光报告，因此我选择在整个页面的初始化的时候就进行实例的创建。同时，因为希望整个埋点的处理逻辑一致，在实例的回调里面进行了统一处理。具体如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">   this.ele = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</div><div class="line">          entries.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (item.intersectionRatio &gt; <span class="number">0</span>) &#123;</div><div class="line">              <span class="keyword">let</span> node = item.target.querySelector(<span class="string">'.need-data'</span>);</div><div class="line">              <span class="built_in">console</span>.log(node.attributes[<span class="string">'code'</span>].value);</div><div class="line">            &#125;</div><div class="line">          &#125;)</div><div class="line">        &#125;, &#123;</div><div class="line">          <span class="attr">threshold</span>: [<span class="number">0.000001</span>]</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>observe()调用的时机，因为页面采用组件化的方式，在最初进行实例化的时候，需要的dom结构都是没有的。之后通过与后端进行数据，采用数据驱动进行页面渲染。因此在数据获取后在下一次DOM循环更新之后才进行observe()的调用。此时所需的dom结构都有了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> newArray = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'need-data'</span>));</div><div class="line">            newArray.forEach(<span class="function">(<span class="params">newItem</span>) =&gt;</span> &#123;</div><div class="line">              <span class="keyword">this</span>.ele.observe(newItem);</div><div class="line">            &#125;)</div><div class="line">          &#125;)</div></pre></td></tr></table></figure>
<p>dom元素与埋点数据的关联，因为之前的逻辑中我们的dom与业务数据耦合度不大，因此获取单纯的dom后无法获取需要上报的数据。同时我们希望这一块对于大部分的曝光需求能够进行逻辑统一。因此我们采取了最简单的方法，将需要上报的数据直接放在dom的一个属性中。因为这部分dom是组件化生成的一部分，所以逻辑上也是一致的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item-content clearfix"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"'item-wrapper-type'+type"</span> :code=<span class="string">"needData.code"</span>&gt;</div><div class="line">....</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>基本进行这三个地方的改动后就能满足我们的大部分类型的需求了。其最后的结果如下:<br><img src="http://okzzg7ifm.bkt.clouddn.com/dataResult.png" alt="结果图"></p>
<h4 id="利弊介绍"><a href="#利弊介绍" class="headerlink" title="利弊介绍"></a>利弊介绍</h4><ul>
<li>优<ul>
<li>性能比直接的监听scroll事件或者设置timer都好</li>
<li>使用简单</li>
<li>利用它的功能组合可以实现很多其他效果，比如无限滚动等</li>
<li>对iframe的支持好</li>
</ul>
</li>
<li>缺<ul>
<li>兼容性不好</li>
<li>它不是完美像素与无延迟的，毕竟根本上是异步的。因此不适合做滚动动画</li>
</ul>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://www.cnblogs.com/ziyunfei/p/5558712.html" target="_blank" rel="external">IntersectionObserver API</a>: 强烈推荐这篇文章，干货满满</li>
<li><a href="https://w3c.github.io/IntersectionObserver/#intersection-observer-processing-model" target="_blank" rel="external">Intersection Observer</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="external">Intersection Observer API</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility" target="_blank" rel="external">Timing element visibility with the Intersection Observer API</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了IntersectionObserver API，并且就如何将其用于数据埋点给出了尝试。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://memory.lulutia.com/categories/lulutia/"/>
    
    
      <category term="data" scheme="http://memory.lulutia.com/tags/data/"/>
    
  </entry>
  
  <entry>
    <title>基于React-Native及Redux的Immutable.js引入</title>
    <link href="http://memory.lulutia.com/2017/07/10/immutableJS/"/>
    <id>http://memory.lulutia.com/2017/07/10/immutableJS/</id>
    <published>2017-07-10T09:06:08.000Z</published>
    <updated>2017-07-10T12:04:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何对RN项目进行render count的优化，着重介绍了Immutable.js及其如何与Redux和React Native融合。</p>
<a id="more"></a>
<h4 id="前菜之背景介绍"><a href="#前菜之背景介绍" class="headerlink" title="前菜之背景介绍"></a>前菜之背景介绍</h4><p>话说某天，楼主吃着火锅唱着歌，逛到了React的Performance Tools版块，心血来潮，放到了手上的项目里面玩了玩，看完后整个人都不太好了，数据如下(我一页屏幕都截不完……)：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-oldPref.png?" alt="性能图"><br>但实际上我所执行的操作仅仅只是为颜色外观打了个分，如下所示：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-coperation.png" alt="操作图"></p>
<p>根据上面的统计数据，初略计算了下，一个打分操作render count为293。一个页面必填5个打分项，如此一来总共render count  &gt;= 1465，其中还排除了用户打分完毕后继续修改的情况。不用我说，大家也能看出这是一个相当不合理的数字。因为就理想状况而言，打分操作最多只影响当前的打分项，一个打分组件五颗星，其具体结构如下所示:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;View key=&#123;i&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">&#123;&#123;marginTop:</span> <span class="attr">5</span>, <span class="attr">marginRight:</span> <span class="attr">5</span>&#125;&#125;</div><div class="line">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;&#123;......&#125;</div><div class="line">        &gt;</div><div class="line">        <span class="tag">&lt;<span class="name">IconFont</span> <span class="attr">name</span>=<span class="string">"star"</span> <span class="attr">size</span>=<span class="string">&#123;StyleSheet.r(22)&#125;</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;/</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因此直接改变量为3*5=15是比较合理，再加上全局的Navar以及connect等操作，render count达到293也是绝对不合理且，通过分析，我们可以看到有很多数据根本没改变的组件也被重新渲染了的，这部分开销完全是不必要且有相当大的改进空间的。既然如此，我们来改进下吧~</p>
<p>为了减少环境变量且便于修改与测试，我们基于种子项目来模拟当前的状况。种子项目在React Native官方项目基础上集成了Redux进行数据处理，除此之外还提供了一些基本的工具函数及路由封装。<br>我们构造了两个页面，点击第一个页面的button会跳转到第二个页面，在第二个页面会从服务器端获取数据，渲染成列表形式，除此之外在列表上方有一个button，它会记录点击次数并且展示出来。大概布局如下：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-exampleLayout.png?imageView2/2/w/500/h/500/q/100|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="demo图"></p>
<p>既然是模拟前文的情况，那我们可以预测点击addCount button后，整个列表应该是被重新渲染了的，虽然他的数据实际上并没有变化，讲道理是不应该重新渲染的。实际结果如下图所示，的确和我们的预测一样，List下的Text render count是不必要的。<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-examplePref.png?" alt="demo性能图"></p>
<p>这里有一个点要注意，所谓的重新渲染指的是在virtual dom层面的。下图是整个渲染过程开始到结束的主要流程，而本文关心的是下图黄色框中的部分，而重中之重是黄色框中的第三部: 其后代组件执行Update。<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-setstate.png?" alt="渲染过程"></p>
<p>因为我们采用Redux进行数据处理，每个页面的initailState为一个对象，而从不直接修改state 是Redux 的核心理念之一，所以触发action后reducer返回的是一个新的对象。这一流程相当于执行了setState操作，因此整个页面开始执行dirty的标记，因为是新对象，所以几乎所有与state相关的组件及其后代组件都要执行Update的流程，如果我们不对Update的流程进行特殊定制，则shouldComponentUpdate默认返回true，之后执行render函数。因此，出现了上述中多次不必要render的情况。<br>所以，首要任务是添加shouldComponentUpdate函数进行处理。但是这里会有两个明显的问题：</p>
<ul>
<li>每个页面，甚至每个组件的state，props结构不一样，很难有统一的对比函数</li>
<li>state，props的结构可能很复杂，一步步的循环迭代对比对性能的消耗可能很大</li>
</ul>
<p>针对shouldComponentUpdate，React提供了PureRenderMixin的方式来进行处理，但是这种方式其进行的只是浅对比，如果是复杂数据结构的深层次不一样，它也可能返回false。因此只能处理简单的数据结构，或者针对开发者对整个state层次有完全的把握，能够在深层次变化后显示调用this.forceUpdate()的情况。显然与我们的需求不符。此时，本文的主题Immutable.js终于要出场了。</p>
<h4 id="主菜之Immutable-js介绍"><a href="#主菜之Immutable-js介绍" class="headerlink" title="主菜之Immutable.js介绍"></a>主菜之Immutable.js介绍</h4><p>讨论Immutable.js之前，我们首先看看啥叫Immutable。来，看看维基百科的定义：</p>
<blockquote>
<p>In object-oriented and functional programming, an immutable object is an object whose state cannot be modified after it is created.This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>
</blockquote>
<ul>
<li><p>需要解决的问题</p>
<ul>
<li><p>减少复杂性，增加代码的可控性</p>
<p>  对于immutable object在创建后就再也不能修改了，而mutable object却可以修改，举个很简单的栗子：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fruit = &#123;<span class="attr">apple</span>: <span class="number">1</span>&#125;;</div><div class="line">friuit.apple = <span class="number">2</span>;</div><div class="line">fruit; <span class="comment">// &#123;apple: 2&#125;</span></div></pre></td></tr></table></figure>
<p>  上面这种特性在频繁需要修改原对象的时候特别好用，可以节约内存。但是这种灵活性往往以可控性为代价，多处使用中的任意一处修改都会影响所有的使用，比如下面的栗子：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> animal = &#123;<span class="attr">dog</span>: <span class="number">1</span>&#125;;</div><div class="line">changeAnimalCount(animal);</div><div class="line">animal; <span class="comment">// ?</span></div></pre></td></tr></table></figure>
<p>  经过函数调用后，我们谁都不知道animal变成了啥样 = =。处理这种情况，我们往往需要执行深拷贝，然后在拷贝出的对象上执行操作，这样可以保证数据的可控性，但这个又往往以内存的大量使用为代价。特别不巧的是，我们的项目中还真的有很多地方用到了深拷贝，并且为了这个操作引入了extend库。因此，如何在花费很少的情况下对state的状态做一个很好的记录成为了一个问题。</p>
</li>
<li><p>减少UI框架中View层与Model层的耦合</p>
<p>  在我们进行应用交互时，我们相当关注状态的改变，因为状态的改变意味着我们需要做哪些UI层面的变动，这部分是数据驱动的。简单的说，我们可能实现下面的代码：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> storeData = &#123;<span class="attr">key</span>: <span class="string">'before'</span>&#125;;</div><div class="line">renderUI(storeData);</div><div class="line">getDataFromServer(url, ()=&gt;&#123;</div><div class="line">	renderUI(storeData);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  但是上面这种情况造成的问题是，也许和服务器交互后的数据根本没有改变，然而我们要执行UI渲染。或者的确执行了UI渲染，但是我们并不知道是具体的哪块数据进行了变动。因此我们可能改良出下面的代码：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> storeData = &#123;<span class="attr">key</span>: <span class="string">'before'</span>&#125;;</div><div class="line">renderUI(storeData);</div><div class="line"><span class="built_in">Object</span>.observer(storeData, (changes) =&gt; &#123;</div><div class="line">	renderUI(storeData, changes);</div><div class="line">&#125;)</div><div class="line">getDataFromServer(url);</div></pre></td></tr></table></figure>
<p>  这种情况下，我们通过Object.observer()来对数据进行监听，这样至少我们知道哪些数据进行了变化。但是这种情况下依然有问题，因为Object.observer()执行的只是第一层的比较，因此如果是深层次的变化它依然没法处理。同时，如果数据变化频繁的情况下，它也做了很多的无用功，毕竟我们只关心最后的状态。因此现在的做法基本是使用如下所示的：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = &#123;</div><div class="line">	<span class="attr">dirty</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">_raw</span>: &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;,</div><div class="line">	<span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">key, newValue</span>) </span>&#123;</div><div class="line">		...</div><div class="line">		this.dirty = <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderUI</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!data.dirty) &#123;<span class="keyword">return</span>;&#125;</div><div class="line">	data.dirty = <span class="literal">false</span>;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  但是这种情况如果同时对一个状态进行多种渲染，因为在第一个渲染中已经改变了dirty的状态，这样并不会调用第二个渲染，如下：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">renderTop(data);</div><div class="line">renderBottom(data);</div></pre></td></tr></table></figure>
<p>  因此，既然每一个render都要执行dirty状态的检测，所以可以建立一个UI框架，将这层检测包裹进去，而不用使用者自己来做。但这样一来Model层和View层就耦合了。因此，如何在不对MV进行强耦合的情况下对数据的变化进行监听成为了一个问题。</p>
</li>
<li><p>处理缓存</p>
<p>  当我们在处理一些消耗很大的操作时，我们可能希望将之前的结果存储起来而不是每一次都重新计算。比如像下面这样：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">expensiveCoperation</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> data = memorize(expensiveCoperation);</div><div class="line"><span class="keyword">let</span> initialData = ...;</div><div class="line">data(initialData);</div></pre></td></tr></table></figure>
<p>  市面上有很多对于memorize的实现，比如下面这个：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">memorize</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> cache = &#123;&#125;;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">		<span class="keyword">let</span> hash = arg === <span class="built_in">Object</span>(arg) ? <span class="built_in">JSON</span>.stringify(arg) : currentArg;</div><div class="line">		<span class="keyword">return</span> hash <span class="keyword">in</span> cache ? cache[hash] : (cache[hash] = fn.call(<span class="keyword">this</span>, arg));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  但是上面这种实现里面的JSON.stringify()是一个O(n)的操作，当数据量够大时，执行这个函数的操作说不定还没有不执行的快。在具体实现中也许我们可以简化这个操作，只对比前一次的输入和这一次的输入，只关心前一次的结果和这一次的结果。此时我们便可以不必使用JSON.stringify了。实际上React中的shouldComponentUpdate就是只对前一次状态和这一次状态进行对比。但对比时我们其实进行的是值的对比而不是引用的对比。所以缓存性能的提高最后落脚点到如何快速进行值的比较。因此，如何对复杂结构的值进行对比成为了一个问题。</p>
</li>
</ul>
</li>
<li><p>解决办法</p>
<p>  针对以上问题，Immutable.js提出了一下几个解决方案：</p>
<ul>
<li><p>持久化结构数据</p>
<p>所谓持久化结构数据即Persistent data structire，我们来看维基百科的定义：</p>
<blockquote>
<p>In computing, a persistent data structure is a data structure that always preserves the previous version of itself when it is modified. Such data structures are effectively immutable, as their operations do not (visibly) update the structure in-place, but instead always yield a new updated structure.</p>
</blockquote>
<p>我们如果用时间流的概念来看这个问题，即每一次改变都保存了一个类似快照的东西，之后的改变并不会影响之前的快照。这样我们就能够对state的变化做一个很好的记录，解决了上面的第一个问题。但是你可能会担心这样等于说是进行拷贝，会耗费很多内存，因此请看下面的解决方案。</p>
</li>
<li><p>结构共享</p>
<p>当我们使用一个新的值时，我们希望能够尽量复用老值不变的部分，因为这样意味着少量的copy操作和少量的内存使用。数据结构中的有向无环图可以实现这个需求。但是JS中基本的数据结构Array和Object显然都不是用DAG[Directed Acyclic Graph]实现的。因此Immutable.js等于用Trie自己实现了一套数据结构。基本的思路如下：</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-share.png" alt="结构共享"><br>每个节点都有自己的hashCode，因此比较两个对象时，实际就是比较其hashCode，这样就避免了深度遍历。</p>
</li>
<li><p>惰性加载</p>
<p>在Immutable.js中提供了Seq来执行惰性加载。Seq执行最小的工作来对任何方法作出反应。比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> oddSquares = Seq([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ])</div><div class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</div><div class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</div><div class="line">  <span class="built_in">console</span>.log(oddSquares.get(<span class="number">1</span>)); <span class="comment">//9</span></div></pre></td></tr></table></figure>
<p>上面这个例子filter将只会执行三次，而map只会执行一次。这种特性对于处理大型数据相当有用。</p>
</li>
<li><p>其他</p>
<p>  Immutable的特性意味着它特别适合用于多线程开发，它避免了很多不必要的锁的存在。虽然这点对于现在的JS没啥作用，但谁知道未来呢，毕竟多核已经越来越普遍。</p>
</li>
</ul>
</li>
<li><p>基本API</p>
<p>  Immutable.js主要提供了下面几种数据类型：</p>
<ul>
<li>List：类似Array</li>
<li>Map：类似Object</li>
<li>OrderedMap：在Map的基础上根据set顺序进行排序</li>
<li>Set： 类似ES6中的Set</li>
<li>OrderedSet：在Set的基础上根据add顺序进行排序</li>
<li>Stack：有序集合，进行unshift和shift的操作复杂度为O(1)</li>
<li>Range(start, end, step)：返回Seq.Indexed类型数据的集合</li>
<li>Repeat(value, times)：返回Seq.Indexed类型的数据集合，重复times生成value值</li>
<li>Record：；类似ES6中的Class，细节上不同</li>
<li>Seq：序列</li>
<li>Iterable：可以被迭代的key，value集合，是其他所有集合的基类</li>
<li><p>Collection：抽象类，无法直接构建此类型</p>
<p>其中最常用的是List和Map。</p>
</li>
<li><p>常用API：</p>
<ul>
<li><p>fromJS(): 最常用的将原生JS数据转换为Immutable数据的转换方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = Immutable.from(&#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>toJS(): 将Immutable数据转换为原生JS</p>
</li>
<li><p>set()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> originalList = List([ <span class="number">0</span> ]);</div><div class="line"><span class="comment">// List [ 0 ]</span></div><div class="line">originalList.set(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">// List [ 0, 1 ]		</span></div><div class="line">List().set(<span class="number">50000</span>, <span class="string">'value'</span>).size;</div><div class="line"><span class="comment">// 50001</span></div></pre></td></tr></table></figure>
</li>
<li><p>setIn(): 进行深度赋值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, List([ <span class="number">3</span>, <span class="number">4</span> ])])</div><div class="line">list.setIn([<span class="number">3</span>, <span class="number">0</span>], <span class="number">999</span>);</div><div class="line"><span class="comment">// List [ 0, 1, 2, List [ 999, 4 ] ]</span></div></pre></td></tr></table></figure>
</li>
<li><p>get()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span> ]);</div><div class="line"><span class="keyword">let</span> value = list.get(<span class="number">0</span>); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
</li>
<li><p>getIn(): 进行深度取值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, List([ <span class="number">3</span>, <span class="number">4</span> ])]);</div><div class="line"><span class="keyword">let</span> value = list.getIn([<span class="number">3</span>, <span class="number">0</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
</li>
<li><p>is(): 进行值对比[对于复杂对象其实是hashCode的对比]</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="number">1</span> &#125;)</div><div class="line">assert(map1 !== map2)</div><div class="line">assert(<span class="built_in">Object</span>.is(map1, map2) === <span class="literal">false</span>)</div><div class="line">assert(is(map1, map2) === <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>除了上面这些，Immutable.js基本提供了所有的对应原生操作的方法，具体见<a href="https://facebook.github.io/immutable-js/docs/#/List/getIn" target="_blank" rel="external">这里</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="甜点之具体集成到RN-Redux的项目中"><a href="#甜点之具体集成到RN-Redux的项目中" class="headerlink" title="甜点之具体集成到RN+Redux的项目中"></a>甜点之具体集成到RN+Redux的项目中</h4><p>在第一点中我们分析了遇到的优化点，在第二点中我们讲解了能进行优化的工具，现在我们来进行具体的优化。</p>
<ul>
<li><p>combineReducers的切换<br>  我们之前combineReducers用的是Redux提供的，但是它只能处理原生JS，所以我们需要引入redux-immutable，它提供的combineReducers可以处理Immutable数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, compose&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux-immutable'</span>;</div><div class="line">...</div><div class="line">export <span class="keyword">default</span> (data = Immutable.Map(&#123;&#125;)) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> rootReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">route</span>: routeReducer,</div><div class="line">    <span class="attr">modules</span>: combineReducers(reducers)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> createStore(rootReducer, data, middleware);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>每个Reducer的初始化数据也应该采用Immutable数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> initialState = Immutable.Map(&#123;</div><div class="line">  <span class="attr">dataList</span>: Immutable.List([]),</div><div class="line">  <span class="attr">count1</span>: <span class="number">0</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>与服务端数据的交互在第获取一时间转换为Immutable数据，在发送第一时间转化为原生数据</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> fetch(url).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">     <span class="keyword">return</span> res.json();</div><div class="line">   &#125;, (er) =&gt; &#123;<span class="built_in">console</span>.log(er);&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">     data = Immutable.fromJS(data || &#123;&#125;);</div><div class="line">     dispatch(&#123;</div><div class="line">       <span class="attr">type</span>: GETDATA_END,</div><div class="line">       <span class="attr">payload</span>: &#123;</div><div class="line">         <span class="attr">dataList</span>: data.get(<span class="string">'data'</span>)</div><div class="line">       &#125;</div><div class="line">     &#125;);</div><div class="line">   &#125;, (error) =&gt; &#123;</div><div class="line">     <span class="built_in">console</span>.log(error);</div><div class="line">     dispatch(&#123;</div><div class="line">       <span class="attr">type</span>: GETDATA_BEGIN</div><div class="line">     &#125;);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>  这里需要注意以下两点：</p>
<ul>
<li>如果使用安卓模拟器，且使用localhost的数据，需要直接填写localhost的ip地址。因为模拟器有自己的localhost ip，如果直接用localhost就指向了它提供的地址，而不是本机的地址了</li>
<li><p>如果使用iOS模拟器，其请求的是http协议的地址，需要在info.plist开启对http的支持，如下：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class="line">      &lt;true/&gt;</div><div class="line">     &lt;/dict&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>因为Persistent data structire，Reducer返回的数据不用新建一个对象了</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[GETDATA_END]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</div><div class="line">   <span class="keyword">const</span> &#123;dataList&#125; = action.payload;</div><div class="line">   <span class="keyword">return</span> state.set(<span class="string">'dataList'</span>, dataList);</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
</li>
<li><p>shouldComponentUpdate可以进行统一处理了</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">shouldComponentUpdate(nextProps, nextState) &#123;</div><div class="line">  <span class="keyword">const</span> thisProps = <span class="keyword">this</span>.props || &#123;&#125;;</div><div class="line">  <span class="keyword">const</span> thisState = <span class="keyword">this</span>.state || &#123;&#125;;</div><div class="line">  nextState = nextState || &#123;&#125;;</div><div class="line">  nextProps = nextProps || &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(thisProps).length !== <span class="built_in">Object</span>.keys(nextProps).length ||</div><div class="line">    <span class="built_in">Object</span>.keys(thisState).length !== <span class="built_in">Object</span>.keys(nextState).length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</div><div class="line">    <span class="keyword">if</span> (!Immutable.is(thisProps[key], nextProps[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</div><div class="line">    <span class="keyword">if</span> (!Immutable.is(thisState[key], nextState[key])) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>函数的传递方式需要注意</p>
<p>  如果每次render时都是重新声明的函数，则其对比会有问题，因为is()内部对函数的对比是基于ValueOf的，所以将下面的第一种方式改为第二种方式：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;() =&gt; <span class="keyword">this</span>.addCount()&#125; style=&#123;Style.btnContainer&#125;&gt;</div><div class="line">     <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.btnWord&#125;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line"> &lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>.addCount&#125; style=&#123;Style.btnContainer&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.btnWord&#125;</span>&gt;</span>addCount<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">  &lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>经过上面这些改造后，我们的demo文件Render count如下所示，很好，楼主又可以欢快的吃火锅啦：<br><img src="http://okzzg7ifm.bkt.clouddn.com/immutable-after.png?" alt="优化之后"></p>
<h4 id="酒水之利弊介绍"><a href="#酒水之利弊介绍" class="headerlink" title="酒水之利弊介绍"></a>酒水之利弊介绍</h4><ul>
<li>优<ul>
<li>能便利的进行时间溯洄，便于状态的把控与调试</li>
<li>结构共享，节约内存</li>
<li>并发安全</li>
<li>能抽象出统一的对比函数</li>
<li>Model与View耦合度不高</li>
</ul>
</li>
<li>缺<ul>
<li>有学习成本</li>
<li>容易与原生函数混淆，并且原生函数一旦重写可能会导致问题</li>
<li>资源大小增加</li>
<li>跨页面数据同步方式会有变动，之前页面间进行引用传递，在B页面进行的修改会自动呈现到A页面，但是现在是Persistent data structire，因此B页面的改动A页面无感，需要特殊的触发机制来进行状态同步</li>
<li>因为并非原生的数据结构，所以像解构这种用法需要引入特殊的库后才能使用</li>
</ul>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://www.youtube.com/watch?v=I7IdS-PbEgI&amp;feature=youtu.be" target="_blank" rel="external">React.js Conf 2015 - Immutable Data and React</a></li>
<li><a href="https://facebook.github.io/react/docs/optimizing-performance.html" target="_blank" rel="external">Optimizing Performance</a></li>
<li><a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">Immutable.js</a></li>
<li><a href="https://juejin.im/post/5948985ea0bb9f006bed7472" target="_blank" rel="external">Immutable.js 以及在 react+redux 项目中的实践</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender" target="_blank" rel="external">Immutable 详解及 React 中实践</a></li>
<li><a href="http://stylechen.com/react-and-immutable.html" target="_blank" rel="external">从 React 的组件更新谈 Immutable 的应用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何对RN项目进行render count的优化，着重介绍了Immutable.js及其如何与Redux和React Native融合。&lt;/p&gt;
    
    </summary>
    
      <category term="lulutia" scheme="http://memory.lulutia.com/categories/lulutia/"/>
    
    
      <category term="React Native" scheme="http://memory.lulutia.com/tags/React-Native/"/>
    
      <category term="React" scheme="http://memory.lulutia.com/tags/React/"/>
    
      <category term="optimization" scheme="http://memory.lulutia.com/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习系列二</title>
    <link href="http://memory.lulutia.com/2017/07/06/reactnative02/"/>
    <id>http://memory.lulutia.com/2017/07/06/reactnative02/</id>
    <published>2017-07-06T08:58:30.000Z</published>
    <updated>2017-07-13T06:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><ul>
<li><p>历史情况</p>
<ul>
<li>最早的服务器端渲染: 新的请求发送到服务器端，服务器端返回一个新的页面，然后浏览器进行渲染。导致基本上任何与UI相关的数据变化时，都要全部重新走完整个绘制流程<a id="more"></a></li>
<li>人工重绘界面: 交互产生事件，事件对应预先设定的重绘逻辑。导致代码中充斥着人工的处理渲染的逻辑</li>
<li>数据绑定: 在UI上增加了监听器，当监听器接收到事件变更时自动知道如何处理。这种方式需要在一开始就设置所有的绑定，当事件发生时，只有那些确实需要变化的进行变化。这种方式对事件变更本身会进行一层处理，导致需要按照特定的API进行处理</li>
<li>脏检测: 创建了值的观察器，一旦应用中发生变化，就检测这个观察器里的值是否与之前的值相同，如果不同就重新渲染这个值到UI。这种方式因为没有告诉框架是否变了以及什么地方变化了，所以只能通过外部来检查，比如有一种方法就是一旦交互产生，就重新把所有观察器跑一遍。这种方式遇见UI比较复杂或者重绘经常性发生时就很可能产生性能问题</li>
<li><p>虚拟DOM: 思想上与服务器端渲染类似。只要状态发生变化，就全部重新渲染一次。但是其不同的地方在于他不是在真正DOM上执行这个操作，而是渲染到虚拟DOM，即一个轻量的纯javaScript的对象结构，里面是简单对象和数组来表达真实的DOM对象。之后再通过一个特殊的过程根据这个虚拟DOM来创建真实DOM。因此当一个值发生变化时，会通过对比新生成的虚拟DOM与之前的虚拟DOM而找出涉及DOM的变化，之后将变化反应在真正的DOM上。这种方式不用跟踪变动，减少了昂贵的DOM操作，这部分的详细了解推荐通过<a href="https://github.com/Matt-Esch/virtual-dom#dom-model" target="_blank" rel="external">virtual-dom</a>这个项目来进行分析，总的来说流程如下:</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/virtualdom.png" alt="virtualdom"></p>
</li>
</ul>
</li>
</ul>
<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul>
<li><p>什么是JSX</p>
<blockquote>
<p>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.JSX produces React “elements”.</p>
</blockquote>
<ul>
<li>我们可以看见两个关键点：<ol>
<li>它是JS的语法扩展(我们可以理解我为它就是一个比较高级的语法糖)</li>
<li>与模板语言不一样，它能利用JS自带的语法和特性。因此基本会写JS就能写JSX，学习成本低，并且能利用JS本身的语法</li>
<li>React基于Virtual DOM创造的JSX，JSX创造的是React element，它不是真正的DOM，因此也意味着在没有真正DOM的情况下，它也能模拟DOM的行为(React-Native中实际也没有真正的DOM)</li>
</ol>
</li>
<li><p>具体行为</p>
<ul>
<li><p>以react举例下面两段代码完全一致：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = React.createElement(<span class="string">'p'</span>, <span class="literal">null</span>, <span class="string">'my test'</span>)</div><div class="line"><span class="keyword">var</span> root = React.createElement(<span class="string">'div'</span>, &#123; <span class="attr">className</span>: <span class="string">'root-div'</span> &#125;, p1);</div></pre></td></tr></table></figure>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> root = (</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'root-div'</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>my test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure>
</li>
<li><p>JSX之后会被专门的解释器解释为JS(在打包阶段就完成了，因此不会有性能上的问题)再执行</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>JSX语法</p>
<ul>
<li><p>在JSX中你可以使用{}来包裹JS表达式，下面以RN来举例</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;refundDetailData.return.returnPics &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[Style.basicLayout,</span> <span class="attr">Style.image</span>]&#125;&gt;</span></span></div><div class="line">   	<span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;[Style.textColor,</span> <span class="attr">Style.navTitle</span>]&#125;&gt;</span>图片信息:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">ImageShow</span> <span class="attr">picUrls</span>=<span class="string">&#123;refundDetailData.return.returnPics&#125;/</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;/<span class="name">View</span>&gt;</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>JSX本身也是一种表达式，因此可以在if语句，for循环等各种场合中使用</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dataList.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TouchableHighlight</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item.contactName&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item.contactTel&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">TouchableHighlight</span>&gt;</span></div><div class="line">));</div></pre></td></tr></table></figure>
</li>
<li><p>JSX可以定义属性，一般每个组件都会接受一组属性(props)</p>
<ul>
<li>属性的名字可以自定义</li>
<li>属性的值能够是变量，当属性值是变量时需要通过{}包裹起来，此时注意如果在这个大括号外层用双引号包裹，则此时整条语句会作为字符串进行解析，而不是变量了</li>
<li>虽然JSX与HTML有很多类似处，但是其最后还是编译为JS的，因此，在React DOM中的属性名是遵循驼峰命名法的</li>
<li><p>当忽略属性的值时，JSX会按照true来对待它。而不使用属性时，其对应的值与组件实现内部默认值有关</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">/*下面两条代码实现的效果一样*/</span>&#125;</div><div class="line">&lt;Input type=<span class="string">"button"</span> disabled /&gt;;</div><div class="line">&lt;Input type="button" disabled=&#123;true&#125; /&gt;;</div><div class="line"></div><div class="line">&#123;/*下面两条代码实现的效果一样*/&#125;</div><div class="line">&lt;Input type="button" /&gt;;</div><div class="line">&lt;Input type="button" disabled=&#123;false&#125; /&gt;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>JSX标签能够包含子元素就如HTML一样，而且其子元素也可以运用JS的语法进行构建</p>
</li>
<li><p>JSX中的注释就如JS类似，但是需要注意当在子元素中进行注释时，需要用{}将注释包裹起来</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;Nav&gt;</div><div class="line">   &#123;<span class="comment">/* child comment, put &#123;&#125; around */</span>&#125;</div><div class="line">   &lt;Person</div><div class="line">     <span class="comment">/* multi</span></div><div class="line">        line</div><div class="line">        comment */</div><div class="line">     name=&#123;<span class="built_in">window</span>.isLoggedIn ? <span class="built_in">window</span>.name : <span class="string">''</span>&#125; <span class="comment">// end of line comment</span></div><div class="line">   /&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>JSX中的事件处理是直接绑定在组件上的，下面以RN为例</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableHighlight style=&#123;Style.tabBtn&#125; underlayColor=&#123;Colors.yellowLighten&#125;onPress=&#123;<span class="keyword">this</span>.goToReturnList&#125;&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;Style.tabBtnText&#125;</span>&gt;</span>退货单<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/TouchableHighlight&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>相比于使用下面这种方式，界面元素和业务逻辑的耦合会更加明显</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#my-button'</span>).on(<span class="string">'click'</span>, <span class="keyword">this</span>.checkAndSubmit.bind(<span class="keyword">this</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>在JSX中，需要注意事件名依然按照驼峰命名法来进行，而大括号中就是事件触发时返回的事件处理函数。JSX中绑定的事件自动进行了解绑处理，当对应的DOM不存在时，其绑定的事件就自动解绑了。</p>
</li>
<li>React有一个模拟事件系统。它并不会将事件绑定到真正的节点上，当React启动时，他开始在顶层用一个单独的事件监听器来监听所有的事件。当一个组件加载或者移除时，它绑定的事件将在一个内置的映射上被添加或者移除。当事件真正触发时，React知道如何运用这个映射来dispatch这个事件。</li>
<li>虽然整个事件系统由React来管理了，但是其API和使用方法与原生事件一致。因此做到了浏览器的兼容。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul>
<li>在React中，组件只是一种状态机，整个UI的渲染可以算做是状态驱动的。你更新一个组件的状态，然后根据新的状态渲染UI，React会以一种最效率的方式来更新DOM</li>
<li>大多数组件只需要根据传入的props里面的数据进行渲染，属性是在组件初始化之后就从父级组件带入到组件内部。我们无法在使用的过程中对组件的属性进行修改。但是当需要对用户输入，时间的流逝，服务端请求作出反应时，需要用state来进行状态记录，state是实际上组件中使用的数据，它可以被修改</li>
<li>在React中，通过调用setState(data, callback)来告诉它数据变动了，这个方法将data合并进this.state，之后告诉组件状态变动了需要进行重新渲染，callback会在重新渲染完毕后被调用。注意setState()这个方法是异步的，同步的多个setState方法只会触发一次实际render</li>
<li><p>组件在实例化之后就开始了它的生命周期过程。它的整个生命周期主要由以下几个部分组成:</p>
<ul>
<li><p>getDefaultProps():在组件类创建的时候调用<strong>一次</strong>，然后返回值被缓存下来, 它返回的任何复杂对象用于设置默认的props, 并且这些将会在实例间共享，而不是每个实例拥有一份拷贝。注意只能在子组件或组件树上调用setProps。别调用this.setProps或者直接修改this.props。可以通propTypes对props的类型进行验证</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> propTypes = &#123;</div><div class="line">   <span class="attr">data</span>: PropTypes.object,</div><div class="line">   <span class="attr">pickerNameStyle</span>: Text.propTypes.style</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>getInitialState():在组件挂载之前调用<strong>一次</strong>。返回值将会作为 this.state的初始值。这个方法执行时已经可以访问组件的props。注意state是每个组件自带的，而props是所有实例共享的</p>
</li>
<li>componentWillMount():在初始化渲染执行之前立刻调用，且只调用一次，这是渲染前最后修改state的机会</li>
<li>render():render方法返回的结果并不是真正的DOM元素，而是一个虚拟的表现，类似于一个DOM tree的结构的对象。它是唯一一个必须的方法。在这个方法中，会检测this.props和this.state，返回一个单子级组件,当然也可以返回null或者false。render函数不应该修改state,操作DOM或者与浏览器交互</li>
<li><p>componentDidMount():在初始化渲染执行之后立刻调用一次,在生命周期中的这个时间点，组件拥有一个DOM展现[即虚拟DOM构建完毕]，你可以通过this.getDOMNode()来获取相应DOM节点。当需要从组件获取真实DOM的节点，可以使用ref属性。注意在RN中，是先调用子组件的componentDidMount()，然后调用父组件的函数。这个函数之后，就进入了稳定运行状态，等待事件触发</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line">return &lt;canvas ref=<span class="string">'mainCanvas'</span>&gt;</div><div class="line">......</div><div class="line">componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> canvas = <span class="keyword">this</span>.refs.mainCanvas.getDOMNode();</div><div class="line">    <span class="comment">//可以访问到 Canvas 节点</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>componentWillReceiveProps():用此函数可以作为react在props传入之后，render()渲染之前更新state的机会,新的props是传入的,老的props可以通过this.props来获取。注意在该函数中调用this.setState()将不会引起二次渲染</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps: <span class="function"><span class="keyword">function</span>(<span class="params">nextProps</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.setState(&#123;</div><div class="line">	    <span class="attr">likesIncreasing</span>: nextProps.likeCount &gt; <span class="keyword">this</span>.props.likeCount</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>shouldComponentUpdate():在接收到新的props或者state,将要渲染之前调用。如果shouldComponentUpdate返回false,则render()将不会执行,直到下一次state改变。(通过此函数可以提高性能)</p>
</li>
<li>componentWillUpdate():和componentWillMount类似,在组件接收到了新的props或者state即将进行重新渲染前调用,注意你不能在该方法中使用this.setState()。如果需要更新state来响应某个prop的改变,请使用componentWillReceiveProps。紧接着这个函数，就会调用render()来更新界面了</li>
<li>componentDidUpdate():和componentDidMount类似,使用该方法可以在组件更新之后操作DOM元素</li>
<li><p>componentWillUnmount():当组件从DOM中移除的时候立刻调用来完成所有的清理和销毁工作,在conponentDidMount中添加的任务都需要再该方法中撤销,如创建的定时器或事件监听器</p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/reactlife.png" alt="virtualdom"></p>
</li>
</ul>
</li>
</ul>
<h3 id="运行组件UI-example"><a href="#运行组件UI-example" class="headerlink" title="运行组件UI example"></a>运行组件UI example</h3><ul>
<li>运行官方案例(即在虚拟机上查看RN各个组件的实际效果)<ul>
<li><a href="https://github.com/facebook/react-native#examples" target="_blank" rel="external">运行方法</a></li>
<li>运行过程中可能出现的问题<ul>
<li>What went wrong: Execution failed for task ‘:ReactAndroid:buildReactNdkLib’. <ul>
<li><a href="http://stackoverflow.com/questions/36209774/unable-to-run-react-native-uiexplorer-example-project" target="_blank" rel="external">解决办法</a></li>
</ul>
</li>
<li>安卓新项目起不来<ul>
<li>解决办法: 注意下是不是老项目的shell还在运行，需要重新编译链接一次</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="官方组件举例"><a href="#官方组件举例" class="headerlink" title="官方组件举例"></a>官方组件举例</h3><ul>
<li><p>ScrollView</p>
<ul>
<li>ScrollView是一个普通的可滚动容器，它能包含多个组件和View。</li>
<li>ScrollView能纵向滚动也能横向滚动</li>
<li>ScrollView一般用来展示限制尺寸的少量东西。因为所有ScrollView里面的元素和组件都会被渲染，不管它当前是否展示在屏幕上。</li>
<li>ScrollView必须有一个确定的高度才能正常工作，因为滚动的本质就是将一系列不确定高度的子组件装进一个确定高度的容器</li>
<li><p>属性</p>
<ul>
<li>contentContainerStyle：传入的样式属性，其作为样式会应用在包裹所有子元素的内容元素容器上</li>
<li><p>horizontal：确定横向还是纵向滚动，默认为false，即默认纵向滚动</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ScrollView style=&#123;styles.listTab&#125; horizontal&gt; </div><div class="line">      &#123;<span class="keyword">this</span>.level.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.tabTextContainer&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">Text</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          )</div><div class="line">      &#125;)&#125;         </div><div class="line">     &lt;<span class="regexp">/ScrollView&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>keyboardDismissMode：决定当拖拽时，键盘是否消失</p>
<ul>
<li>none：默认，拖拽不会让键盘消失</li>
<li>on-drag：当拖拽开始时，键盘消失</li>
<li>interactive：安卓上不支持，键盘伴随拖拽操作同步地消失，并且如果往上滑动会恢复键盘</li>
</ul>
</li>
<li>keyboardShouldPersistTaps：决定当点击时，键盘是否可见。这个属性特别重要。比如ScrollView里面有很多输入框时，我们希望点击输入框是输入框本身拿到事件，而键盘并不会在切换时进行关闭再打开的操作。<ul>
<li>never：默认，当点击文本输入框之外时，如果键盘是打开的则关闭键盘。当这个发生时，子元素将不会接收到点击事件</li>
<li>always：键盘将不会自动关闭，并且scroll view不会捕捉到点击事件，但是子元素能够捕捉到点击事件</li>
<li>handle：键盘将不会自动关闭当点击是由子元素触发的</li>
<li>false：用never替代</li>
<li>true：用always替代</li>
</ul>
</li>
<li><p>onContentSizeChange：当滚动视图的内容尺寸大小发生变化的时候调用</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">this.level = ['我常买', '热卖', '一级类目', '鸡腿系列', '海鲜系列', '鸭制品系列'];</div><div class="line">...</div><div class="line">&lt;TouchableHighlight onPress=&#123;() =&gt; &#123;this.level.pop(); this.forceUpdate();&#125;&#125;&gt;</div><div class="line">     &lt;View style=&#123;styles.button&#125; &gt;</div><div class="line">       &lt;Text style=&#123;styles.add&#125;&gt;+&lt;/Text&gt;</div><div class="line">     &lt;/View&gt;</div><div class="line">   &lt;/TouchableHighlight&gt;</div><div class="line">   ...</div><div class="line">   &lt;ScrollView style=&#123;styles.listTab&#125; horizontal onContentSizeChange=&#123;(contentWidth, contentHeight) =&gt; &#123;console.debug(contentWidth, contentHeight);&#125;&#125;&gt; </div><div class="line">      &#123;this.level.map((item, index) =&gt; &#123;</div><div class="line">        return (</div><div class="line">          &lt;View style=&#123;styles.tabTextContainer&#125; key=&#123;index&#125;&gt;</div><div class="line">            &lt;Text&gt;&#123;item&#125;&lt;/Text&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">          )</div><div class="line">      &#125;)&#125;         </div><div class="line">      &lt;/ScrollView&gt;</div></pre></td></tr></table></figure>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/contentSizechange.png" alt="life"></p>
</li>
<li>onScroll：该方法在滚动的时候每frame(帧)调用一次，调用的频率可以用scrollEventThrottle属性来控制。当滚动到边界后无法触发</li>
<li>refreshControl：一个refreshControl组件，主要在下拉刷新时使用</li>
<li>pagingEnabled：默认false，当为true时，scroll view会停留在其尺寸的倍数的位置。这个能够被用在在横向翻页。具体表现就是，超过Scroll View尺寸一点时页面会自动会回退回去，超过很多但是尚未到达其尺寸两倍的位置，则会向前到达其两倍尺寸的位置，之后如此类推</li>
<li>removeClippedSubviews：默认为true，在ScrollView视图之外的子视图(该视图的overflow属性值必须要为hidden)会被暂时移除，该设置可以提高滚动的性能</li>
<li>scrollEnabled：默认true，当为false时，内容不会滚动</li>
<li>showsHorizontalScrollIndicator：默认true，当为true时，横向滚动会展示滑条</li>
<li>showsVerticalScrollIndicator：默认true，当为true时，纵向滚动会展示滑条</li>
</ul>
</li>
<li>仅Android支持的属性:<ul>
<li>endFillColor：当滚动内容没填充满Scroll View时设定填充不满的区域</li>
<li>scrollPerfTag：在Scroll View上记录滚动性能的标签</li>
</ul>
</li>
<li>仅iOS支持的属性:<ul>
<li>alwaysBounceHorizontal：横向弹簧效果，当horizontal ={true}默认是true，horizontal={false}默认是false</li>
<li>alwaysBounceVertical：纵向弹簧效果，当horizontal ={true}默认是false，horizontal={false}默认是true</li>
<li>automaticallyAdjustContentInsets：默认true，自动调节内容内偏移，控制是否自动调节内容内偏移以便于一个navigation bar或者tab bar或者toolbar不挡住Scrollview中的内容</li>
<li>bounces：默认true，控制水平方向与垂直方向的弹簧效果，优先级比alwaysBounce* 属性高</li>
<li>bouncesZoom：控制拉近与缩小超过限制时是否有弹性动画，当为true时有</li>
<li>canCancelContentTouches：默认true，控制ScrollView是否可以拖动，如果为false不能拖动</li>
<li>centerContent：默认false，为true时如果ScrollView中内容小于ScrollView的边界，则它们自动居中，超过边界时无效</li>
<li>contentInset：内部内容距离ScrollView边界的内偏移量，默认为{top: 0, left: 0, bottom: 0, right: 0}</li>
<li>contentOffset：用来手动设置起始滚动偏移量。默认为 {x: 0,y: 0} </li>
<li>decelerationRate：指定手指抬起减速速率<ul>
<li>normal: 0.998，为默认</li>
<li>fast: 0.99</li>
<li>也可以指定一个浮点数，确定减速快慢</li>
</ul>
</li>
<li>directionalLockEnabled：默认false，为true时控制只有一个方向可以滚动当拖拽</li>
<li>indicatorStyle：指示器样式，default与black相同，black与白色背景搭配，white与黑色背景搭配</li>
<li>maximumZoomScale：默认是1.0，放大的最大系数</li>
<li>minimumZoomScale：默认是1.0，缩小的最大系数</li>
<li>onScrollAnimationEnd：滚动动画完成后触发</li>
<li>scrollEventThrottle：控制滚动时滚动事件触发频率</li>
<li>scrollIndicatorInsets： {top: number, left: number, bottom: number, right: number}，指定指示器内偏移量，应与contentInset值相同，默认{0, 0, 0, 0}</li>
<li>scrollsToTop：默认true，默认true时，Scroll View滚动到顶部当状态条被点击时</li>
<li>snapToAlignment：当snapToInterval指定时，这个属性定义这个停驻点相对于Scroll View的关系。<ul>
<li>start (默认) 会将停驻点对齐在左侧（水平）或顶部（垂直）</li>
<li>center 会将停驻点对齐到中间</li>
<li>end 会将停驻点对齐到右侧（水平）或底部（垂直）</li>
</ul>
</li>
<li>snapToInterval：当指定时，会导致Scroll View停留在这个参数的倍数的位置。这个属性一般与snapToAlignment一起用</li>
<li>stickyHeaderIndices：子元素索引构成的数组，用来指定滚动时这些元素停靠到界面的顶部，比如传递stickyHeaderIndices={[0]}将让第一个子元素固定到Scroll View的顶部。当horizontal={true}时，这个属性不支持</li>
<li>zoomScale：当前Scroll View内容的缩放比例</li>
</ul>
</li>
<li>方法<ul>
<li>scrollTo()：例如scrollTo({x: 0; y: 0; animated: true})，滚动到指定的x, y偏移处。第三个参数为是否启用平滑滚动动画</li>
<li>scrollToEnd()：如果是纵向的滚动，则滚动到底部，如果是横向，则滚动到右部</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="官方API举例"><a href="#官方API举例" class="headerlink" title="官方API举例"></a>官方API举例</h3><ul>
<li><p>BackHandler</p>
<ul>
<li><p>监听硬件的back键操作。如果没有任何监听函数，或者监听函数的返回值不是true，则会调用默认的back键功能来退出应用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.backAndroidListener = BackHandler.addEventListener(<span class="string">'hardwareBackPress'</span>, () =&gt; &#123;</div><div class="line">	<span class="keyword">if</span> (navigator.getCurrentRoutes().length &gt; <span class="number">1</span>) &#123;</div><div class="line">		navigator.pop();</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.onExitApp();</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>方法：</p>
<ul>
<li>exitApp：当你在监听里面无法立刻判断是否要退出，比如你需要获取异步操作执行成功后再调用，此时可以用这个函数来退出</li>
<li>addEventListener：绑定监听函数</li>
<li>removeEventListener：移除监听函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://teropa.info/blog/2015/03/02/change-and-its-detection-in-javascript-frameworks.html" target="_blank" rel="external">Change And Its Detection In JavaScript Frameworks</a></li>
<li><a href="http://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="external">React Native 中组件的生命周期</a></li>
<li><a href="https://davidwalsh.name/event-delegate" target="_blank" rel="external">How JavaScript Event Delegation Works</a></li>
<li><a href="http://www.infoq.com/cn/articles/react-jsx-and-component" target="_blank" rel="external">深入浅出React（三）：理解JSX和组件</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;状态管理&quot;&gt;&lt;a href=&quot;#状态管理&quot; class=&quot;headerlink&quot; title=&quot;状态管理&quot;&gt;&lt;/a&gt;状态管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;历史情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最早的服务器端渲染: 新的请求发送到服务器端，服务器端返回一个新的页面，然后浏览器进行渲染。导致基本上任何与UI相关的数据变化时，都要全部重新走完整个绘制流程
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="ReactNative" scheme="http://memory.lulutia.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React Native 学习系列一</title>
    <link href="http://memory.lulutia.com/2017/07/06/reactnative01/"/>
    <id>http://memory.lulutia.com/2017/07/06/reactnative01/</id>
    <published>2017-07-06T07:11:10.000Z</published>
    <updated>2017-07-12T04:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><ul>
<li>创造者: Facebook</li>
<li>时间: React.js Conf 2015 上发布，9月推出Android版本</li>
<li>使用范围: 用于开发<strong>iOS和Android</strong>原生应用</li>
<li>设计理念: 既拥有Native的<strong>用户体验</strong>、又保留React的<strong>开发效率</strong></li>
</ul>
<a id="more"></a>
<ul>
<li>产生原因:<ul>
<li>Native的原生控件有更好的体验，有更好的手势识别，有更合适的线程模型，能实现更精细的动画</li>
<li>Native开发成本高</li>
</ul>
</li>
<li>发展趋势: 开源不到1周github上star破万</li>
<li>基本特点:<ul>
<li>Learn once, write anywhere<ul>
<li>用React.js抽象操作系统的原生UI组件，继而代替DOM元素来渲染</li>
</ul>
</li>
<li>具备流畅和反应灵敏的优势<ul>
<li>在后台，React Native运行在主线程之外，而在另一个专门的后台线程里运行JavaScript引擎，两个线程之间通过异步消息协议来通信。</li>
</ul>
</li>
</ul>
</li>
<li>对应技术栈<ul>
<li>JSX vs HTML</li>
<li>CSS-layout vs css</li>
<li>ECMAScript 6 vs ECMAScript 5</li>
<li>React Native View vs DOM</li>
</ul>
</li>
</ul>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><ul>
<li>按照React Native官方文档搭建环境<ul>
<li><a href="http://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">英文版</a>搭建流程</li>
<li><a href="http://reactnative.cn/docs/0.46/getting-started.html" target="_blank" rel="external">中文版</a>搭建流程</li>
<li>模拟器推荐使用<a href="https://www.genymotion.com/" target="_blank" rel="external">Genymotion</a>。</li>
</ul>
</li>
<li>安装过程中可能出现的问题<ul>
<li>$ANDROIDNDK 和 $ANDROIDHOME 没有正确设置: <ul>
<li>解决办法：vi .bashrc和.bash_profile 加上 /usr/local/opt/android-ndk和/usr/local/opt/android-sdk,并且source一下这两个文件，然后eoch下上述两个变量是否已经存在。</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://reactnative.cn/docs/0.41/running-on-device-android.html#content" target="_blank" rel="external">真机调试</a><ul>
<li>注意iOS系统真机调试需要有开发者账号</li>
<li>可能有些机型无法用这种方式进行(比如小米4C)，可以手动安装</li>
</ul>
</li>
</ul>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li>文件结构</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/structure.png" alt="文件结构"></p>
<ul>
<li>代码结构<ul>
<li>7-13: 引入需要用到的模块</li>
<li>15-32: 本组件的渲染逻辑</li>
<li>34-51: 样式定义</li>
<li>53: AppRegistry是JS运行所有React Native应用的入口，应用的根组件应当通过AppRegistry.registerComponent方法注册自己，然后原生系统才可以加载应用的代码包并且在启动完成之后通过调用AppRegistry.runApplication来真正运行应用</li>
<li>样式定义可以单独提出作为一个模块，甚至组件的具体实现也可以和应用注册分离开来</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/code.png" alt="文件结构"></p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><ul>
<li>React Native中用JS来写样式</li>
<li>所有的核心组件都接受名为style的属性。这些样式名基本上是遵循了web上的CSS的命名，只是按照JS的语法要求使用了驼峰命名法</li>
<li>style属性可以是一个普通的JavaScript对象，也可以是一个数组，在数组中位置居后的样式对象比居前的优先级更高</li>
<li><a href="http://reactnative.cn/docs/0.41/text.html#style" target="_blank" rel="external">Text样式</a></li>
<li><a href="http://reactnative.cn/docs/0.41/view.html#style" target="_blank" rel="external">View样式</a></li>
<li>最简单的调试方法: 当错误的书写了样式属性时，应用会抛出一个warning，在这个warning里面会列出当前元素所有可使用的样式</li>
<li>实际开发中组件的样式会越来越复杂，官方建议使用StyleSheet.create来集中定义组件的样式。StyleSheet提供了一种类似CSS样式表的抽象，相比于plain object，其主要有以下优势<ul>
<li>代码质量:<ul>
<li>移除了render里面的具体样式内容，使代码组织更加合理</li>
<li>给样式命名可以对render函数中的原始组件进行一种作用标记</li>
</ul>
</li>
<li>性能角度:<ul>
<li>创建一个样式表，就可以使得我们后续更容易通过ID来引用样式，而不是每次都创建一个新的对象</li>
<li>它还使得样式只会在JavaScript和原生之间传递一次，随后的过程都可以只传递一个ID(现在还没实现)</li>
</ul>
</li>
<li>因此，如果我们直接打印styles.xxx，我们只会得到一个number，要使用StyleSheet.flatten(styles.xxx)才能得到具体内容</li>
</ul>
</li>
</ul>
<h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><ul>
<li>在React Native中布局采用的是FleBox(弹性框)进行布局</li>
<li>Flex布局主要思想是让容器有能力让其子项目能够改变其宽度、高度(甚至顺序)，以最佳方式填充可用空间(主要是为了适应所有类型的显示设备和屏幕大小)</li>
</ul>
<p>像素无关</p>
<ul>
<li><p>React Native中的尺寸都是无单位的，表示的是与设备像素密度无关的逻辑像素点</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View style=&#123; &#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">100</span>,<span class="attr">margin</span>:<span class="number">40</span>,<span class="attr">backgroundColor</span>:<span class="string">'gray'</span>&#125;&#125;&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> &#123;<span class="attr">fontSize:16</span>,<span class="attr">margin:20</span>&#125;&#125;&gt;</span>尺寸<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/View&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>上面的例子，运行在Android上时，View的长和宽被解释成100dp 其单位是dp，字体被解释成16sp 其单位是sp，运行在iOS上时尺寸单位被解释称了pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变。如果希望获取实际的像素尺寸，则需要使用尺寸 * pixelRatio。<a href="https://facebook.github.io/react-native/docs/pixelratio.html" target="_blank" rel="external">pixelRatio使用</a></p>
</li>
</ul>
<p>React Native中的FlexBox 和Web CSS中的FlexBox不全相同</p>
<ul>
<li>flexDirection: React Native中默认为flexDirection:’column’，在Web CSS中默认为flex-direction:’row’</li>
<li>alignItems: React Native中默认为alignItems:’stretch’，在Web CSS中默认align-items:’flex-start’</li>
<li>flexWrap: React Native中没有wrap-reverse，在Web CSS中有</li>
<li>flex: 相比Web CSS的flex接受多参数，如:flex: 2 2 10%;，但在 React Native中flex只接受一个参数</li>
<li>不支持属性：align-content，flex-flow等</li>
</ul>
<p>Flex基本知识[基于RN]<br>  <img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/flex.png" alt="flex基本概念"></p>
<ul>
<li><p>父容器属性</p>
<ul>
<li>flexDirection属性定义了父视图中的子元素沿横轴或侧轴方片的排列方式，默认为column: ‘row’, ‘column’,’row-reverse’,’column-reverse’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/flexdirection.png" alt="flexDirection"></p>
<ul>
<li>flexWrap属性定义了子元素在父视图内是否允许多行排列，默认为nowrap: ‘wrap’, ‘nowrap’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/wrap.png" alt="flexWrap"></p>
<ul>
<li>justifyContent属性定义了浏览器如何分配顺着父容器主轴的弹性（flex）元素之间及其周围的空间，默认为flex-start: ‘flex-start’, ‘flex-end’, ‘center’, ‘space-between’, ‘space-around’</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/justifyContent.png" alt="justifyContent"></p>
<ul>
<li>alignItems属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch: ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’。这里需要注意，当选择stretch时，侧轴上的元素不能有固定的size，否则无效</li>
</ul>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/alignItems.png" alt="alignItems"></p>
</li>
<li><p>子容器属性</p>
<ul>
<li>alignSelf决定了元素在父元素的次轴方向的排列方式（此样式设置在子元素上），其值会覆盖父元素的alignItems的值，默认auto: ‘auto’, ‘flex-start’, ‘flex-end’, ‘center’, ‘stretch’</li>
</ul>
</li>
<li><p>flex 属性定义了一个可伸缩元素的能力，默认为0</p>
</li>
<li>视图边框: border[Bottom/Top/Left/Right]Width，borderColor等</li>
<li>尺寸: width，height</li>
<li>外边距: margin[Bottom/Top/Left/Right/Horizontal/Vertical]等</li>
<li>内边距: padding[Bottom/Top/Left/Right/Horizontal/Vertical]等</li>
<li>边缘: left，right，top，bottom等</li>
<li>定位: absolute，relative</li>
<li><a href="https://reactnative.cn/docs/0.39/layout-props.html" target="_blank" rel="external">更多参考</a></li>
</ul>
<p>图片布局</p>
<ul>
<li><p>图片有一个stretchMode. 通过Image.resizeMode访问，其主要有以下几种模式(默认采用cover模式):</p>
<ul>
<li>cover: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都大于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。这样图片完全覆盖甚至超出容器，容器中不留任何空白</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/cover.png" alt="cover"></p>
<ul>
<li>contain: 在保持图片宽高比的前提下缩放图片，直到宽度和高度都小于等于容器视图的尺寸（如果容器有padding内衬的话，则相应减去）。这样图片完全被包裹在容器中，容器中可能留有空白</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/contain.png" alt="contain"></p>
<ul>
<li>stretch: 拉伸图片且不维持宽高比，直到宽高都刚好填满容器</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/stretch.png" alt="stretch"></p>
<ul>
<li>repeat: 重复平铺图片直到填满容器。图片会维持原始尺寸。仅iOS可用，android使用会报错</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/repeat.png" alt="repeat"></p>
<ul>
<li>center: 居中不拉伸</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/center.png" alt="center"></p>
</li>
</ul>
<p>文本元素  </p>
<ul>
<li>文本可嵌套</li>
<li><p><text>元素在布局上不同于其它组件：在Text内部的元素不再使用flexbox布局，而是采用文本布局。这意味着<text>内部的元素不再是一个个矩形，而可能会在行末进行折叠</text></text></p>
<p><img src="https://raw.githubusercontent.com/lulutia/images/master/ReactNative/one/text.png" alt="center"></p>
</li>
<li><p>你必须把你的文本节点放在<text>组件内。你不能直接在<view>下放置一段文本</view></text></p>
</li>
<li>不能直接设置一整颗子树的默认样式。使用一个一致的文本和尺寸的推荐方式是创建一个包含相关样式的组件MyAppText，然后在你的App中反复使用它</li>
<li>文本标签的子树还是可以继承的，继承父元素的样式</li>
<li>通过numberOfLines={}可以实现文字截断效果</li>
<li>注意ios和android的默认文字样式是不一样的，主要是fontSize和color的不同。</li>
</ul>
<p>参考</p>
<ul>
<li><a href="https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/" target="_blank" rel="external">React Native: Bringing modern web techniques to mobile</a></li>
<li><a href="http://www.jianshu.com/p/1e990aac7836" target="_blank" rel="external">基于Facebook Buck改造Android构建系统之初体验</a></li>
<li><a href="https://github.com/amfe/article/issues/32" target="_blank" rel="external">flow——A static type checker for javascript</a></li>
<li><a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git%E5%B1%9E%E6%80%A7" target="_blank" rel="external">自定义 Git - Git属性</a></li>
<li><a href="http://reactnative.cn/docs/0.36/appregistry.html" target="_blank" rel="external">AppRegistry</a></li>
<li><a href="https://github.com/crazycodeboy/RNStudyNotes/blob/master/React%20Native%E5%B8%83%E5%B1%80/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/React%20Native%E5%B8%83%E5%B1%80%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97.md" target="_blank" rel="external">React Native布局详细指南</a></li>
<li><a href="http://weibo.com/1712131295/CoRnElNkZ?ref=collection&amp;type=comment#_rnd1486356368337" target="_blank" rel="external">flex布局示意图</a></li>
<li><a href="https://segmentfault.com/a/1190000002658374" target="_blank" rel="external">react-native 之布局篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创造者: Facebook&lt;/li&gt;
&lt;li&gt;时间: React.js Conf 2015 上发布，9月推出Android版本&lt;/li&gt;
&lt;li&gt;使用范围: 用于开发&lt;strong&gt;iOS和Android&lt;/strong&gt;原生应用&lt;/li&gt;
&lt;li&gt;设计理念: 既拥有Native的&lt;strong&gt;用户体验&lt;/strong&gt;、又保留React的&lt;strong&gt;开发效率&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="ReactNative" scheme="http://memory.lulutia.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>WEBGL系列之二维操作</title>
    <link href="http://memory.lulutia.com/2017/06/07/webgl01/"/>
    <id>http://memory.lulutia.com/2017/06/07/webgl01/</id>
    <published>2017-06-07T03:15:45.000Z</published>
    <updated>2017-07-12T04:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>背景介绍</p>
<ul>
<li>WebGL的技术规范继承自免费和开源的OpenGL标准[是用于渲染2D、3D矢量图形的跨语言、跨平台的API]</li>
</ul>
<a id="more"></a>
<ul>
<li>具体的说，WebGL是从OpenGL的一个特殊版本OpenGL ES中派生出来的，后者专用于嵌入式计算机，智能手机，家用游戏机等设备。它从OpenGL中移除了许多陈旧无用的旧特性，这使得它在保持轻量级的同时，仍具有足够的能力来渲染出精美的三维图形。</li>
<li>OpenGL2.0开始支持的可编程着色器方法被OpenGL ES2.0继承，成为了WebGL1.0标准的核心部分。而着色器方法或称为着色器，是使用一种类似C的编程语言实现精美的视觉效果。而编写着色器的语言称为着色器语言，WebGL使用OpenGL ES着色器语言，亦即GLSLES。</li>
<li>WebGL规范的建立由Khronos(也负责OpenGL规范的更新和标准化)建立的WebGL工作小组负责。2011年发布了WebGL规范的第一个版本。<a href="https://www.khronos.org/registry/webgl/specs/latest/2.0/" target="_blank" rel="external">WebGL2.0</a>处于<a href="http://stackoverflow.com/questions/6692762/what-is-the-difference-between-a-w3c-working-draft-and-an-editors-draft" target="_blank" rel="external">Editor’s Draft</a>状态，它主要提供与OpenGL3.0新特性的对应，现阶段它并不与WebGL1.0完全向下兼容。</li>
</ul>
<p>基本概念<br>  WebGL主要是用于渲染2D、3D矢量图形。在进入它的使用细节之前，我们先分析下它到底做了件什么事以及其执行的顺序。<br>  如果你有过一点三模建模方面的经验的话，你就会知道，所有的三维模型都是由点，线，三角形构成的。譬如下面这只超级出名的bunny兔子。模型的精细程度与其面片的数量直接相关，当面片数量足够多时，人类的视觉是无法分辨三角形的。<br>  同理，如果我们打开WebGL的绘图API，我们就会发现，它处理的也是点，线，三角形。那么它是如何由这些最基础的东西构建出整个世界的呢。其实，它主要执行了三方面的操作：</p>
<ul>
<li>获取顶点坐标<ul>
<li>简单图形，可以显示定义</li>
<li>复杂图形，一般会在三维软件导出模型时一同导出</li>
<li>顶点坐标会写入缓冲中等待使用</li>
</ul>
</li>
<li><p>进行图元装配：即将顶点根据primitive(原始的连接关系）还原成网格结构</p>
<ul>
<li>在WebGL中，为了使用者对顶点的位置有足够的控制权，提供了一个顶点着色器的东西。它是用上面提到的opengl es编写的，然后以字符串的形式嵌入在js文件中的，在程序开始运行前就已经设置好了</li>
<li><p>顶点着色器中主要对点的特性进行处理，比如进行坐标的转换等，然后由GPU执行图元装配。此处是以单个点为单位执行的操作，有多少个点，这段程序就会执行多少次</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> VSHADER_SOURCE = </div><div class="line"><span class="string">'void main() &#123;\n'</span> +</div><div class="line"><span class="string">'gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n'</span> + <span class="comment">//设置坐标，必须</span></div><div class="line"><span class="string">'gl_PointSize = 10.0;\n'</span> + <span class="comment">// 设置尺寸，非必需，默认1.0</span></div><div class="line"><span class="string">'&#125;\n'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>进行光栅化：将图转化为一个个栅格组成的图象</p>
<ul>
<li>上面一部生成了模型的网格形态，但是要呈现实际的模型还需要“着色”，这部分WebGL也为我们提供了片元着色器来进行控制。</li>
<li><p>片元着色器主要进行材质，颜色的处理等，它会进行逐片元处理过程，片元这边可大概理解为像素(图像的单元)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> 	<span class="keyword">var</span> FSHADER_SOURCE = </div><div class="line"><span class="string">'void main() &#123;\n'</span> +</div><div class="line"><span class="string">'gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n'</span> + <span class="comment">// 设置颜色</span></div><div class="line"><span class="string">'&#125;\n'</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p> 下面图示为整体流程:</p>
<p> <img src="http://okzzg7ifm.bkt.clouddn.com/01.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="整体流程"><br>GLSE中的数据类型</p>
<ul>
<li>基本类型<ul>
<li>float: 表示浮点数</li>
<li>int： 整型 </li>
<li>bool： 布尔类型</li>
<li>齐次坐标: (x, y, z, w) 等价于三维坐标 (x/w, y/w, z/w)，w必需大于等于0，齐次坐标的存在，使得用矩阵乘法来描述顶点变换称为可能，三维图形系统在计算过程中，通常使用齐次坐标来表示顶点的三维坐标，这样能够提高处理三维数据的效率</li>
</ul>
</li>
<li>矢量和矩阵<ul>
<li>vec4: 表示由四个浮点数组成的矢量，类似有 vec2,vec3,ivec2,ivec3,ivec4,bvec2,bvec3,bvec4</li>
<li>mat2: 表示2<em>2的浮点数元素的矩阵，类似有 mat3,mat4, 注意<em>*列主序</em></em></li>
</ul>
</li>
<li>结构体<br>  使用struct，将已存在的类型聚合到一起，就可以定义为结构体</li>
<li>数组<br>  只支持一维数组，而且数组对象不支持pop()和push()等操作</li>
<li>取样器(纹理)：必须通过该类型变量访问纹理，两种基本的取样器类型如下<ul>
<li>sampler2D</li>
<li>samplerCube</li>
<li>注意：取样器变量只能是uniform变量，或者需要访问纹理的函数</li>
</ul>
</li>
<li>函数</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">返回类型函数名(type0, arg0, type1, arg1, ...typen, argn) &#123;</div><div class="line">	函数计算</div><div class="line">	<span class="keyword">return</span> 返回值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>存储限定字<ul>
<li>const: 不可变</li>
<li>attribute: 只能出现在顶点着色器中，只能被声明为全局变量，被用来表示逐点的信息</li>
<li>uniform：可以用在顶点和片元着色器中，必须是全局变量，uniform变量是只读的，它可以是数组和结构体之外的任意类型，它包含了“一致”[即非逐顶点／片元的]的数据</li>
<li>varying: 必须全局，从顶点着色器向片元着色器传输数据，在两个着色器中必须同名同类型</li>
</ul>
</li>
<li>精度限定字<ul>
<li>highp: 高精度</li>
<li>mediump: 中精度</li>
<li>lowp: 低精度</li>
<li>可以使用关键字precision来声明着色器的默认精度，这行代码必须在顶点着色器或片元着色器的顶部，格式为<strong>precision 精度限定字 类型名称</strong></li>
<li>注意：片元着色器中的float类型没有默认精度，需要手动指定，否则会出现编译错误</li>
</ul>
</li>
<li>预处理指令<br>  预处理指令用来在真正编译之前对代码进行预处理，都以#开始</li>
</ul>
<p>核心思想</p>
<ul>
<li><p><a href="http://lulutia.com/webgldemo/01/" target="_blank" rel="external">获取WebGL上下文</a>：<br><img src="http://okzzg7ifm.bkt.clouddn.com/02.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="获取上下文"></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>);</div><div class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</div><div class="line">ctx.fillStyle = <span class="string">'rgba(0, 0, 255, 1.0)'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://lulutia.com/webgldemo/03/" target="_blank" rel="external">初始化着色器</a>：<br>  详细见具体API 1-13部分，具体流程如下:</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/03.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="初始化着色器"></p>
</li>
<li><p><a href="http://lulutia.com/webgldemo/02/" target="_blank" rel="external">设置canvas背景色并清除canvas</a>：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设定背景色，一旦指定了背景色后，背景色就会常驻WebGL系统，在下一次再调用这个函数前不会改变</span></div><div class="line">gl.clearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>); <span class="comment">//见API 15</span></div><div class="line"></div><div class="line"><span class="comment">// 用背景色清空canvas绘图区域，此方法继承自OpenGL，基于多基本缓冲区模型清空绘图区域，实际上是在清空颜色缓冲区，类似的还有 gl.DEPTH_BUFFER_BIT,gl.STENCIL_BUFFER_BIT</span></div><div class="line">gl.clear(gl.COLOR_BUFFER_BIT); <span class="comment">// 见API16</span></div></pre></td></tr></table></figure>
</li>
<li><p>右手坐标系是WebGL默认的坐标系统</p>
</li>
<li><p><a href="http://lulutia.com/webgldemo/04/" target="_blank" rel="external">JS与着色器之间传输数据(以attribute举例)</a><br>  详细见具体API 17-20部分，具体流程如下: <a href="http://lulutia.com/webgldemo/05/" target="_blank" rel="external">动态传输例子点我</a>, <a href="http://lulutia.com/webgldemo/06/" target="_blank" rel="external">点我</a></p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/04.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="js vs 着色器"></p>
</li>
<li><p><a href="http://lulutia.com/webgldemo/07/" target="_blank" rel="external">缓冲区对象</a><br>  WebGL提供了<strong>缓冲区对象</strong>，它可以一次性的向着色器传入多个顶点的数据。使用缓冲区对象向顶点着色器传入多个顶点数据的步骤如下:<br>  详细见具体API 21-25部分，注意<strong>可以创建多个缓冲区对象</strong></p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/05.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="缓冲区对象"></p>
</li>
<li><p><a href="http://lulutia.com/webgldemo/08/" target="_blank" rel="external">WebGL可绘制的基本图形</a>，主要运用于API 14，<a href="http://lulutia.com/webgldemo/09/" target="_blank" rel="external">对比例子点我</a><br>  WebGL可以绘制gl.POINTS, gl.LINES, gl.LINE_STRIP, gl.LINE_LOOP, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN 七种，它们的绘制顺序如下：</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/06.png?imageView2/2/w/900/h/500/q/75%7Cwatermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt="基本图形"></p>
</li>
<li><p>移动、旋转、缩放</p>
<ul>
<li><p>对于<a href="http://lulutia.com/webgldemo/10/" target="_blank" rel="external">平移</a>而言，就是对顶点的每个分量加上其在对应轴上平移的距离, 因此就是在顶点着色器中对原有的position加上移动的position即可</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newX = oldX + moveX;</div><div class="line">newY = oldY + moveY;</div><div class="line">newZ = oldZ + moveZ;</div></pre></td></tr></table></figure>
</li>
<li><p>对于<a href="http://lulutia.com/webgldemo/11/" target="_blank" rel="external">旋转</a>而言，有公式如下[绕Z轴旋转]，因此将顶点着色器中的坐标换为下面的计算即可：<strong>注意JS内置的Math.cos()和Math.sin()接受的是弧度制，而并非角度</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newX = oldX * cosβ - oldY * sinβ</div><div class="line">newY = oldX * sinβ + oldY * cosβ</div><div class="line">newZ = oldZ</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'void main() &#123;\n'</span> +</div><div class="line"><span class="string">'gl_Position.x = a_Position.x * u_CosB - a_Position.y * u_SinB;\n'</span> + <span class="comment">//设置坐标，必须</span></div><div class="line"><span class="string">'gl_Position.y = a_Position.x * u_SinB + a_Position.y * u_CosB;\n'</span> +</div><div class="line"><span class="string">'gl_Position.z = a_Position.z;\n'</span> + </div><div class="line"><span class="string">'gl_Position.w = 1.0;\n'</span> +</div><div class="line"><span class="string">'&#125;\n'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>当情况复杂起来后，需要进行<a href="http://lulutia.com/webgldemo/12/" target="_blank" rel="external">矩阵变换</a>，比如根据上面可以得到平移矩阵，旋转矩阵和缩放矩阵如下：之后将它与坐标相乘即可得到变换后的坐标,因为<a href="http://lulutia.com/webgldemo/13/" target="_blank" rel="external">矩阵计算比较复杂</a>，一般情况下都使用封装好的矩阵操作库进行计算</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/07.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="矩阵"></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gl_Position = u_xformMatrix * a_Position ;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="http://lulutia.com/webgldemo/14/" target="_blank" rel="external">动画</a></p>
<ul>
<li>根据不同时间确定不同的状态</li>
<li>在每次绘制前，清除上次绘制的内容，并绘制相应状态下的图形</li>
<li>调用requestAnimationFrame(fn)进行持续绘制</li>
</ul>
</li>
<li><p>颜色<br>之前的所有例子我们都是直接设定了颜色值并传入片元着色器，其颜色值是统一的不变的，但是实际中，我们可能会对不同的点着色不同，因此顶点着色器与片元着色器之间应该有某种联系</p>
<ul>
<li>实际在顶点着色器与片元着色器中主要执行了两个步骤：<ul>
<li>图形装配过程：将孤立的顶点坐标装配成几何图形</li>
<li><a href="http://lulutia.com/webgldemo/15/" target="_blank" rel="external">光栅化</a>过程：将装配好的几何图形转化为片元</li>
</ul>
</li>
<li>光栅化过程中生成的片元都是带有坐标信息的，调用片元着色器时这些坐标信息也随着片元传了进来，可以通过片元着色器中的内置变量来访问片元的坐标</li>
<li>在WebGL中，<strong>如果顶点着色器与片元着色器中有类型和命名都相同的varying变量，那么顶点着色器赋给该变量的值就会自动被传入片元着色器</strong>，但是，片元着色器中的v_Color变量和顶点着色器中的v_Color实际并不是一回事，顶点着色器中的v_Color变量在传入片元着色器之前经过了内插过程，所以称为varying</li>
<li><p><a href="http://lulutia.com/webgldemo/16/" target="_blank" rel="external">整个颜色的处理过程如下</a>：</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/08.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="颜色处理"></p>
</li>
</ul>
</li>
<li><p><a href="http://lulutia.com/webgldemo/17/" target="_blank" rel="external">纹理</a><br>  真实世界中的颜色变化是相当细粒度的，我们如果全部通过自己定义来做则会陷入无休止的工作中，因此在三维图形学中，纹理映射就成为了一项关键技术。所谓纹理映射，就是将一张图像映射到一个几何图形的表面上去，它根据纹理图像，为之前光栅化后的每个片元涂上合适的颜色，其中组成纹理图像的像素称为纹素，其具体流程如下：</p>
<p>  <img src="http://okzzg7ifm.bkt.clouddn.com/09.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="纹理处理"></p>
<ul>
<li>在执行纹理映射的过程中，会涉及到纹理坐标，WebGL系统中的纹理坐标是二维的，使用st坐标系统。其坐标值与图像自身的尺寸无关，左下角的坐标为(0.0, 0.0), 右下角为(1.0, 0.0), 右上角为(1.0, 1.0), 左上角为(0.0, 1.0)。纹理映射需要顶点着色器和片元着色器的配合，首先在顶点着色器中为每个顶点指定纹理坐标，然后在片元着色器中根据每个片元的纹理坐标从纹理图像中抽取纹理像素颜色。</li>
<li><p>详细流程见API 27-32，具体代码处理流程如下：在GLSE中运用texture2D(sample2D, sampler, vec2, coord): 来从sample指定的纹理上获取coord指定的纹理坐标处的像素颜色, <a href="http://lulutia.com/webgldemo/18/" target="_blank" rel="external">修改纹理坐标和映射方式点我</a>, <a href="http://lulutia.com/webgldemo/19/" target="_blank" rel="external">多重纹理点我</a></p>
<p><img src="http://okzzg7ifm.bkt.clouddn.com/10.png?imageView2/2/w/900/h/400/q/75|watermark/2/text/bHVsdXRpYQ==/font/5a6L5L2T/fontsize/240/fill/IzAwMDAwMA==/dissolve/20/gravity/SouthEast/dx/10/dy/10|imageslim" alt="纹理代码处理"></p>
</li>
</ul>
</li>
</ul>
<p>具体API<br><strong>注：文中demo根据WebGL编程指南demo改编而来</strong></p>
<ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader" target="_blank" rel="external">gl.createShader(type)</a>: 创建由type指定的着色器对象，type的值分别为gl.VERTEX_SHADER表示顶点着色器 gl.FRAGMENT_SHADER表示片元着色器</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/shaderSource" target="_blank" rel="external">gl.shaderSource(shader, source)</a>: 将source指定的字符串形式的代码传入shader指定着色器，如果之前已经向shader传入过代码了，旧的代码将会被替换掉</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader" target="_blank" rel="external">gl.compileShader(shader)</a>: 编译shader指定的着色器中的源代码</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter" target="_blank" rel="external">gl.getShaderParameter(shader, pname)</a>: 获取shader指定的着色器中，pname指定的参数信息pname: 指定待获取参数的类型，可以是gl.SHADER_TYPE gl.DELETE_STATUS或者gl.COMPILE_STATUS，根据pname的不同，返回不同的值</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog" target="_blank" rel="external">gl.getShaderInfoLog(shader)</a>: 获取shader指定的着色器的信息日志</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader" target="_blank" rel="external">gl.deleteShader(shader)</a>: 如果不需要这个着色器，可以用gl.deleteShader()函数来删除着色器，注意，如果着色器对象还在使用，那么deleteShader()并不会立刻删除着色器而是要等到程序对象不再使用该着色器后，才将其删除</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram" target="_blank" rel="external">gl.createProgram()</a>: 创建程序对象</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader" target="_blank" rel="external">gl.attachShader(program, shader)</a>: 将shader指定的着色器对象分配给program指定的程序对象，着色器在附给程序对象前，并不一定要为其指定代码或进行编译(也就是说，把空的着色器附给程序对象也是可以的)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram" target="_blank" rel="external">gl.linkProgram(program)</a>: 连接program指定的程序对象中的着色器进行这一步的目的是确保：<ul>
<li>顶点着色器和片元着色器的varying变量同名同类型，且一一对应</li>
<li>顶点着色器对每个varying变量赋了值</li>
<li>顶点着色器和片元着色器中的同名uniform变量也是同类型的</li>
<li>着色器中的attribute变量，uniform变量和varying变量的个数没有超过着色器的上限</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter" target="_blank" rel="external">gl.getProgramParameter(program, pname)</a>: 获取pname指定的程序对象中pname指定的参数信息。返回值随着pname的不同而不同pname：gl.DELETE_STATUS gl.LINK_STATUS gl.VALIDATE_STATUS gl.ATTACHED_SHADERS gl.ACTIVE_ATTRIBUTES gl.ACTIVE_UNIFORMS, 根据pname的不同，返回值不同, 程序对象即使连接成功了，也有可能运行失败，比如没有为取样器分配纹理单元。这些错误是在运行阶段而不是连接阶段产生的</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog" target="_blank" rel="external">gl.getProgramInfoLog(program)</a>: 获取program指定的程序对象的信息日志</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram" target="_blank" rel="external">gl.deleteProgram(program)</a>: 删除程序对象</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram" target="_blank" rel="external">gl.useProgram(program)</a>: 告知WebGL系统绘制时使用program指定的程序对象</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays" target="_blank" rel="external">gl.drawArrays(mode, first, count)</a>: 按照mode参数指定的方式绘制图形(gl.POINTS, gl.LINES, gl.LINE_STRIP, gl.LINE_LOOP, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN), first: 指定从哪个顶点开始绘制 整型, count: 指定绘制多少个点 整型</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor" target="_blank" rel="external">gl.clearColor(red, green, blue, alpha)</a>: 确定当清除颜色buffer时使用的颜色</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear" target="_blank" rel="external">gl.clear(mask)</a>: 指定被清除的buffer，可能的值gl.COLOR_BUFFER_BIT，gl.DEPTH_BUFFER_BIT，gl.STENCIL_BUFFER_BIT </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation" target="_blank" rel="external">gl.getAttribLocation(program, name)</a>: 获取由name参数指定的attribute变量的存储地址, program: 指定包含顶点着色器和片元着色器的着色器程序对象, name: 指定想要获取其存储地址的attribute变量的名称</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib" target="_blank" rel="external">gl.vertexAttrib3f(location, v0, v1, v2)</a>: 将数据(v0, v1, v2)传给由location参数指定的attribute变量, gl.vertexAttribXf是一系列同族函数，其中X可以为1，2，3，4，无论哪一个，第四个值都为1.0，其他未填位填充0.0, gl.vertexAttribXv是其矢量版本，接受类型化数组, gl.vertexAttrib 基础函数名 x 参数个数 v参数类型 还能够有gl.vertexAttrib[123]f这种用法</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation" target="_blank" rel="external">gl.getUniformLocation(program, name)</a>: 与API17类似</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform" target="_blank" rel="external">gl.uniform[1234][fi]<a href="">v</a></a>: 与API18类似 </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer" target="_blank" rel="external">gl.createBuffer()</a>: 创建缓冲区对象, 这一步的结果是WebGL系统中多了一个新创建出来的缓冲区对象</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer" target="_blank" rel="external">gl.bindBuffer(target, buffer)</a>: 允许使用buffer表示的缓冲区对象并将其绑定到target表示的目标上，target: gl.ARRAY_BUFFER 表示缓冲区对象中包含了顶点的数据，gl.ELEMENT_ARRAY_BUFFER表示缓冲区对象中包含了顶点的索引值，buffer: 指定之前由gl.createBuffer()返回的待绑定的缓冲区对象将缓冲区对象绑定到目标。这个目标表示缓冲区对象的用途, 我们不能直接向缓冲区写入数据，而只能向目标写入数据，所以要向缓冲区写入数据，必须先绑定。</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData" target="_blank" rel="external">gl.bufferData(target, ArrayBufferView srcData, usage)</a>: 这个API在WebGL1.0和2.0上有所不同，具体见规范。总的来说是开辟存储空间，向绑定在target上的缓冲区对象写入数据data</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer" target="_blank" rel="external">gl.vertexAttribPointer(index, size, type, normalized, stride, offset)</a>: 将绑定到target的缓冲区对象分配给由location指定的attribute变量, size: 指定缓冲区中每个顶点的分量个数(1-4), type: 指定数据格式 [gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT, gl.FLOAT], normalized: 传入true, false表明是否将非浮点数的数据归一化到[0, 1]或[-1, 1]区间, stride: 指定相邻两个顶点间的字节数，默认0, offset: 指定缓冲区对象中的偏移量(以字节为单位)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray" target="_blank" rel="external">gl.enableVertexAttribArray(index)</a>: 开启index指定的attribute变量，链接变量与分配给它的缓冲区对象，使顶点着色器能够访问缓冲区内的数据</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix" target="_blank" rel="external">gl.uniformMatrix[234]x[234]fv(location, transpose, array…)</a>: 将array表示的n*n矩阵分配给由location指定的uniform变量，transpose在WebGL中必须指定为false</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture" target="_blank" rel="external">gl.createTexture()</a>: 创建纹理对象以存储纹理图像</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei" target="_blank" rel="external">gl.pixelStorei(pname, param)</a>: 使用pname和param指定的方式处理加载得到的图片, pname:gl.UNPACK_FLIP_Y_WEBGL: 对图像进行Y轴反转，默认为false; gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL: 将图像RGB颜色值的每一个分量乘以A，默认为false, param: 指定非0(true)或0(false)，必须为整数。使用原因：WebGL纹理坐标系统中t轴的方向和PNG,BMP,JPG等格式图片的坐标系统的Y轴方向是相反的，所以要对纹理图像进行Y轴反转</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture" target="_blank" rel="external">gl.activeTexture(texture)</a>: 激活texture指定的纹理单元</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture" target="_blank" rel="external">gl.bindTexture(target, texture)</a>: 开启texture指定的纹理对象，并将其绑定到target上, 如果已经激活了某个纹理单元，则纹理对象也会绑定到这个纹理单元上; target: gl.TEXTURE_2D  gl.TEXTURE_CUBE_MAP;<br>在WebGL中，没法直接操作纹理对象，必须通过将纹理对象绑定到纹理单元上，然后通过操作纹理单元来操作纹理对象</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter" target="_blank" rel="external">gl.texParameter<a href="target, pname, param">fi</a></a>: 将param的值赋给绑定到目标的纹理对象的pname参数上, 具体参数见规定，通常可以不用调用，使用默认值就可以了</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D" target="_blank" rel="external">gl.texImage2D(target, level, internalformat, format, type, image)</a>: 将image指定的图像分配给绑定到目标上的纹理对象</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;背景介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebGL的技术规范继承自免费和开源的OpenGL标准[是用于渲染2D、3D矢量图形的跨语言、跨平台的API]&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>2017你好～</title>
    <link href="http://memory.lulutia.com/2017/01/08/2017HELLO/"/>
    <id>http://memory.lulutia.com/2017/01/08/2017HELLO/</id>
    <published>2017-01-08T12:51:32.000Z</published>
    <updated>2017-07-12T04:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/img/2017.jpg" alt=""></p>
<p>又一年匆匆走过，这一年说长不长说短不短，但的的确确发生了好多好多事情。先来篇流水帐总结。</p>
<a id="more"></a>
<p>被老爹说了n久的驾照终于到手了，并且拿到的第二天就被老爹像拎兔子一样拎出去开了70多公里。</p>
<p>和老爸因为一件现在显而易见已经完全想不起来的事情起了争执，一气之下把齐腰长发剪成了个短的不能再短的发型，完美开启了假小子模式。</p>
<p>回学校后顺利结束了答辩，在等资料处理的漫长的一个月里拉着大鸟去日本走了一遭。在这只有零星早樱的季节吃了超级好吃的美食，看了超级棒的风景，遇见了超级有爱的人，也算满足了小时候的心愿。意大利和日本这两个我在小学毕业写在同学录 最想去的国家 一栏的国家都GET。</p>
<p>之后被老哥约着去菲律宾潜水，计划之外的拿到了初级潜水执照，看到了不一样的风景却依然没有学会游泳，泪目。</p>
<p>4月，繁忙的一个月。拽着啊呜和麦子在陌生的帝都陪我找房子，感受就是贵贵贵……尘埃落定后去广州见了下快五年没见的小燕子～虽然这么久没见平时也没啥联系，但原来的感觉在见面的那刻还是回来了。之后作死的和啊呜去了柬埔寨，三天暴走，看过了千年的文明，也晒的跟块煤炭一样了……</p>
<p>终于的终于还是入职了，然后就入了RN大坑，痛并快乐着的痛快啊。同事都特别好，毕竟年纪差的不多，玩到一块儿没障碍。去了没看见草的草原，漂了比想象中短的水道，爬了只能看见雾霾的山，为了烤鱼来回三四个小时 ｜ 果然吃货技能点的太高。</p>
<p>有些时候会觉得自己好挫，但貌似这个事情急也没用，只能一步一个脚印来。</p>
<p>七月和麦子看了仙剑一的舞台剧，感觉已经记不起上次看舞台剧是多久了，总之其现在的先进程度还是远远超过了我的预期的（也许是我期待值真心太低了</p>
<p>本来约好和科儿的中秋青岛游因为啊呜的突然到来而取消了，不过来了场说走就走的旅行去了趟兰卡威……人生中第二次进警察局，同时深深的体会到自驾的重要性……</p>
<p>国庆先去上海见了科儿，接着和两只萌萌的室友一起从杭州去了趟越南，对于给小费的事情咱都完美的坚持了我们的底线，棒棒的，120个赞。这趟旅游重要的不是去哪里而是和谁去～</p>
<p>16年的最后，集结了浩浩荡荡十多号人一起去东北跨年！零点时刻，我们五只吃着毛肚喝着酒或饮料，就这样毫无防备的被拖入了2017。</p>
<p>你好啊，2017。</p>
<p>PS：自己挖的一大堆坑还是希望能在2017填一填哈，啥日语啊，啥乌克丽丽啊，啥天文观测啊，啥无人机啊 （好吧，发现缺钱是硬伤，好好工作好好赚钱，好好和我爱的人和爱我的人一起过好每一天～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/img/2017.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;又一年匆匆走过，这一年说长不长说短不短，但的的确确发生了好多好多事情。先来篇流水帐总结。&lt;/p&gt;
    
    </summary>
    
      <category term="self" scheme="http://memory.lulutia.com/categories/self/"/>
    
    
      <category term="总结" scheme="http://memory.lulutia.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>yeoman建立脚手架</title>
    <link href="http://memory.lulutia.com/2015/11/03/yeoman%E5%BB%BA%E7%AB%8B%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://memory.lulutia.com/2015/11/03/yeoman建立脚手架/</id>
    <published>2015-11-03T14:10:00.000Z</published>
    <updated>2017-07-12T04:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>首先你要先安装yeoman，<code>npm install -g yo bower grunt-cli gulp</code>。</li>
<li>generator是一个Node.js的模块。</li>
<li>建立一个写generator的文件，必须命名为generator-name(name是自己取)。比如我建立一个generator-lulutia-react。</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>npm init</code>来建立一个package.json。</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    &#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"generator-lulutia-react"</span>,<span class="comment">//必须generator开头</span></div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"the bone to build a app"</span>,</div><div class="line">  <span class="string">"files"</span>: [</div><div class="line">    <span class="string">"app"</span>,</div><div class="line">    <span class="string">"router"</span></div><div class="line">  ],<span class="comment">//必须是你的generator用到的文件构成的数组</span></div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"yeoman-generator"</span><span class="comment">//必须有这条</span></div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"lulutia"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>npm install yeoman-generator --save</code>//yeoman的依赖必须是最新的</p>
</li>
<li>默认执行<code>yo name</code>时执行的是app内的内容，<code>yo name:subcommand</code>执行的是其他文件夹里的内容。</li>
<li>yeoman提供两种组织方式来，其一是:<code>./</code>,其二是:<code>generators/</code>，注意第二种方式的package.json内的files要相应修改。</li>
<li><p>根据提供的基本结构来写自己的脚手架内容</p>
  <figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> generators = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = yeoman.generators.Base.extend(</div><div class="line">&#123;</div><div class="line"><span class="comment">// The name `constructor` is important here</span></div><div class="line"><span class="attribute">constructor</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// Calling the super constructor is important so our generator is correctly set up</span></div><div class="line">generators.Base.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="comment">// Next, add your custom code</span></div><div class="line"><span class="keyword">this</span>.option(<span class="string">'coffee'</span>); <span class="comment">// This method adds support for a `--coffee` flag</span></div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>我这里用了几个库，Prompts:主要掌管generator与用户的交互</p>
  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = yeoman.generators.Base.extend(&#123;</div><div class="line">prompting: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">var</span> done = <span class="keyword">this</span>.async();</div><div class="line"><span class="keyword">this</span>.prompt(&#123;</div><div class="line">  type    : <span class="string">'input'</span>,</div><div class="line">  name    : <span class="string">'name'</span>,</div><div class="line">  message : <span class="string">'Your project name'</span>,</div><div class="line">  <span class="keyword">default</span> : <span class="keyword">this</span>.appname <span class="comment">// Default to current folder name</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="params">(answers)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.log(answers.name);</div><div class="line">  done();</div><div class="line">&#125;.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>writing里面用mkdirp建立基本骨架。在app内部建立templates文件夹，通过里面的文件的拷贝建立结构。</p>
  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdirp(<span class="string">"assets/style"</span>);</div><div class="line">mkdirp(<span class="string">"build"</span>);</div><div class="line">   </div><div class="line">  <span class="keyword">this</span>.fs.copy(</div><div class="line">          <span class="keyword">this</span>.templatePath(<span class="string">'coffeelint.json'</span>),</div><div class="line">          <span class="keyword">this</span>.destinationPath(<span class="string">'coffeelint.json'</span>)</div><div class="line">        );</div></pre></td></tr></table></figure>
</li>
<li><p><code>generator.installDependencies()</code>安装依赖.</p>
</li>
<li>在generator-name/文件夹下运行<code>npm link</code>可以使generator在本地可用。</li>
</ul>
<p>意料之外的问题</p>
<ul>
<li>yeoman安装的时候表示node和npm的版本都落后了，然后npm这个命令就无法用了……简直了＝＝然后想用brew安装下，结果忘记brew没更新，各种更新无效。</li>
<li>直接用<code>curl -L https://www.npmjs.com/install.sh | sh</code>加上sudo也有问题，还是报权限错误。</li>
<li>决定可以用bower，但强迫症患者觉得这样不完美。可以直接重新下node，但觉得代价太大。</li>
<li>用了比较粗暴的方法，去npm 的github上下载了sh，然后<code>sudo sh /Users/muriel/Downloads/install.sh</code>来安装。完了顺便把brew更新下,把没升级的软件升级了<code>brew update;brew upgrade;brew cleanup</code>。</li>
<li>然后又出来一个问题，<code>npm install</code>按照package.json来安装但是目录结构有问题，原来npm的3开始决定采用扁平化处理，所以之前的代码为了适应这个改变必须要做一些改变。</li>
</ul>
<p><a href="https://github.com/lulutia/generator-lulutia-react" target="_blank" rel="external">具体代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;首先你要先安装yeoman，&lt;code&gt;npm install -g yo bower grunt-cli gulp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;generator是一个Node.js的模块。&lt;/li&gt;
&lt;li&gt;建立一个写generator的文件，必须命名为generator-name(name是自己取)。比如我建立一个generator-lulutia-react。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6 learning 五</title>
    <link href="http://memory.lulutia.com/2015/11/02/ES6-5/"/>
    <id>http://memory.lulutia.com/2015/11/02/ES6-5/</id>
    <published>2015-11-02T13:36:00.000Z</published>
    <updated>2017-07-12T04:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>异步操作和Async函数</p>
<ul>
<li>ES6之前，异步编程的几种方式：<ul>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>Promise对象</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li>其他：Generator函数，Thunk函数。可以用thunkify模块，结合Generator函数，封装一个run函数实现自动化流程管理。co模块(使用co的前提条件是，Generator函数的yield命令后面，只能是Thunk函数或Promise对象)。async函数，async函数就是Generator函数的语法糖，它的自动执行器不需要用户自己来实现。</li>
<li>感觉上async最好用：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">chainAnimationsAsync</span>(<span class="params">elem, animations</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ret = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> anim <span class="keyword">of</span> animations) &#123;</div><div class="line">      ret = <span class="keyword">await</span> anim(elem);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="comment">/* 忽略错误，继续执行 */</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Class</p>
<ul>
<li>类的内部所有定义的方法，都是不可枚举的（enumerable）。</li>
<li>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。</li>
<li>实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。</li>
<li>Class表达式：采用Class表达式，可以写出立即执行的Class。</li>
</ul>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MyClass = <span class="class"><span class="keyword">class</span> <span class="title">Me</span> &#123;</span></div><div class="line">  getClassName() &#123;</div><div class="line">    <span class="keyword">return</span> Me.name;</div><div class="line">  &#125;</div><div class="line">&#125;;//需要注意的是，这个类的名字是MyClass而不是Me，Me只在<span class="class"><span class="keyword">Class</span>的内部代码可用，指代当前类。</span></div></pre></td></tr></table></figure>
<ul>
<li>Class不存在变量提升。</li>
<li>继承：<code>class ColorPoint extends Point {}</code><ul>
<li>super关键字，指代父类的实例(即父类的this对象)。<strong>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象</strong>。ES5的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6的继承机制完全不同，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</li>
<li>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。这两条继承链，可以这样理解：作为一个对象，子类（B）的原型（<strong>proto</strong>属性）是父类（A）；作为一个构造函数，子类（B）的原型（prototype属性）是父类的实例。</li>
<li>Object.getPrototypeOf方法可以用来从子类上获取父类。</li>
<li>子类实例的<strong>proto</strong>属性的<strong>proto</strong>属性，指向父类实例的<strong>proto</strong>属性。也就是说，子类的原型的原型，是父类的原型。通过子类实例的<strong>proto</strong>.<strong>proto</strong>属性，可以修改父类实例的行为。</li>
<li>ES6允许继承原生构造函数定义子类，因为ES6是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。</li>
<li>存值函数和取值函数是设置在属性的descriptor对象上的。</li>
<li>父类的静态方法，可以被子类继承。</li>
</ul>
</li>
<li>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</li>
<li>静态属性指的是Class本身的属性，即Class.propname，而不是定义在实例对象（this）上的属性。ES6明确规定，Class内部只有静态方法，没有静态属性。</li>
<li>ES6为new命令引入了一个new.target属性，（在构造函数中）返回new命令作用于的那个构造函数。子类继承父类时，new.target会返回子类。</li>
<li>Mixin模式指的是，将多个类的接口“混入”（mix in）另一个类。</li>
</ul>
<p>修饰器</p>
<ul>
<li>修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</div><div class="line">A = decorator(A) || A;</div></pre></td></tr></table></figure>
<ul>
<li>修饰器不仅可以修饰类，还可以修饰类的属性。修饰器有注释的作用。</li>
<li>由于存在函数提升，使得修饰器不能用于函数。</li>
<li>一些常用的库：core-decorators.js, traits-decorator…</li>
</ul>
<p>Module</p>
<ul>
<li>模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</li>
<li>export语句输出的值是动态绑定，绑定其所在的模块。</li>
<li>ES6支持多重加载，即所加载的模块中又加载其他模块。</li>
<li>import命令具有提升效果，会提升到整个模块的头部，首先执行。</li>
<li>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</li>
<li>module命令可以取代import语句，达到整体输入模块的作用。module命令后面跟一个变量，表示输入的模块定义在该变量上。</li>
<li><strong>export default命令，为模块指定默认输出。</strong>使用export default时，对应的import语句不需要使用大括号；不使用export default时，对应的import语句需要使用大括号。一个模块只能有一个默认输出，因此export deault命令只能使用一次。</li>
<li>模块之间也可以继承。</li>
<li>一些常用的库：ES6 module transpiler, SystemJS</li>
</ul>
<p>编程风格</p>
<ul>
<li>let取代var</li>
<li>在let和const之间，建议优先使用const，let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的。</li>
<li>严格模式</li>
<li>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</li>
<li>使用数组成员对变量赋值，优先使用解构赋值。</li>
<li>函数的参数如果是对象的成员，优先使用解构赋值。</li>
<li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</li>
<li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</li>
<li>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用Object.assign方法。</li>
<li>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</li>
<li>对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</li>
<li>使用扩展运算符（…）拷贝数组。</li>
<li>使用Array.from方法，将类似数组的对象转为数组。</li>
<li>立即执行函数可以写成箭头函数的形式。</li>
<li>那些需要使用函数表达式的场合，尽量用箭头函数代替。</li>
<li>箭头函数取代Function.prototype.bind，不应再用self/_this/that绑定 this。</li>
<li>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</li>
<li>不要在函数体内使用arguments变量，使用rest运算符（…）代替。因为rest运算符显式表明你想要获取参数，而且arguments是一个类似数组的对象，而rest运算符可以提供一个真正的数组。</li>
<li>使用默认值语法设置函数参数的默认值。</li>
<li>注意区分Object和Map，只有模拟实体对象时，才使用Object。如果只是需要key:value的数据结构，使用Map。因为Map有内建的遍历机制。</li>
<li>总是用class，取代需要prototype操作。</li>
<li>使用extends实现继承，因为这样更简单，不会有破坏instanceof运算的危险。</li>
<li>Module语法是JavaScript模块的标准写法，坚持使用这种写法。使用import取代require。</li>
<li>使用export取代module.exports。</li>
<li>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</li>
<li>如果模块默认输出一个函数，函数名的首字母应该小写。如果模块默认输出一个对象，对象名的首字母应该大写。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;异步操作和Async函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6之前，异步编程的几种方式：&lt;ul&gt;
&lt;li&gt;回调函数&lt;/li&gt;
&lt;li&gt;事件监听&lt;/li&gt;
&lt;li&gt;发布/订阅&lt;/li&gt;
&lt;li&gt;Promise对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6 learning 四</title>
    <link href="http://memory.lulutia.com/2015/10/23/ES6-4/"/>
    <id>http://memory.lulutia.com/2015/10/23/ES6-4/</id>
    <published>2015-10-23T12:22:00.000Z</published>
    <updated>2017-07-12T04:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Iterator和for..of循环</p>
<ul>
<li>Iterator的作用有三个：<ul>
<li>一是为各种数据结构，提供一个统一的、简便的访问接口；</li>
<li>二是使得数据结构的成员能够按某种次序排列；</li>
<li>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li>在ES6中，有三类数据结构原生具备Iterator接口：数组、某些类似数组的对象、Set和Map结构。调用Symbol.iterator方法，就会得到当前数据结构默认的遍历器生成函数。</li>
<li>字符串是一个类似数组的对象，也原生具有Iterator接口。</li>
<li>JavaScript原有的for…in循环，只能获得对象的键名，不能直接获取键值。ES6提供for…of循环，允许遍历获得键值。Set结构遍历时，返回的是一个值，而Map结构遍历时，返回的是一个数组，该数组的两个成员分别为当前Map成员的键名和键值。</li>
<li>对于字符串来说，for…of循环还有一个特点，就是会正确识别32位UTF-16字符。</li>
<li>对于普通的对象，for…of结构不能直接使用，会报错，必须部署了iterator接口后才能使用。一种解决方法是，使用Object.keys方法将对象的键名生成一个数组，然后遍历这个数组。另一个方法是使用Generator函数将对象重新包装一下。</li>
<li>for…in循环主要是为遍历对象而设计的，不适用于遍历数组。</li>
</ul>
<p>Generator函数</p>
<ul>
<li>Generator函数是ES6提供的一种异步编程解决方案,Generator函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历Generator函数内部的每一个状态。</li>
<li>Generator函数是一个普通函数，但是有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义不同的内部状态。调用Generator函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield语句（或return语句）为止。换言之，Generator函数是分段执行的，yield语句是暂停执行的标记，而next方法可以恢复执行。yield语句不能用在普通函数中，否则会报错。yield语句如果用在一个表达式之中，必须放在圆括号里面。yield语句用作函数参数或赋值表达式的右边，可以不加括号。for…of循环可以自动遍历Generator函数，且此时不再需要调用next方法。这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象。</li>
<li>如果Generator函数内部没有部署try…catch代码块，那么throw方法抛出的错误，将被外部try…catch代码块捕获。如果Generator函数内部部署了try…catch代码块，那么遍历器的throw方法抛出的错误，不影响下一次遍历，否则遍历直接终止。但是，如果使用throw命令抛出错误，不会影响遍历器状态。</li>
<li>如果Generator函数内部有try…finally代码块，那么return方法会推迟到finally代码块执行完再执行。</li>
<li>yield*语句，用来在一个Generator函数里面执行另一个Generator函数。</li>
<li>可以并行执行、交换执行权的线程（或函数），就称为协程。如果将Generator函数当作协程，完全可以将多个需要互相协作的任务写成Generator函数，它们之间使用yield语句交换控制权。</li>
</ul>
<p>Promise对象</p>
<ul>
<li>所谓Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可供进一步处理。</li>
<li>Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称Fulfilled）和Rejected（已失败）。</li>
<li>Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。</li>
<li>Promise也有一些缺点。首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。第三，当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>
<li>Promise实例具有then方法，也就是说，then方法是定义在原型对象,then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。采用链式的then，可以指定一组按照次序调用的回调函数。</li>
<li>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。Promise在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Iterator和for..of循环&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterator的作用有三个：&lt;ul&gt;
&lt;li&gt;一是为各种数据结构，提供一个统一的、简便的访问接口；&lt;/li&gt;
&lt;li&gt;二是使得数据结构的成员能够按某种次序排列；&lt;/li&gt;
&lt;li&gt;三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6 learning 三</title>
    <link href="http://memory.lulutia.com/2015/10/22/ES6-3/"/>
    <id>http://memory.lulutia.com/2015/10/22/ES6-3/</id>
    <published>2015-10-22T02:09:00.000Z</published>
    <updated>2017-07-12T04:45:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>对象的扩展</p>
<ul>
<li>ES6允许在对象之中，只写属性名。这时，属性值等于属性名所代表的变量。除了属性简写，方法也可以简写。</li>
<li>ES6允许字面量定义对象时，用表达式作为对象的属性名或方法名，即把表达式放在方括号内。<strong>注意，属性名表达式与简洁表示法，不能同时使用，会报错。</strong></li>
</ul>
<a id="more"></a>
<ul>
<li>Object.is用来比较两个值是否严格相等。它与严格比较运算符（===）的行为基本一致。不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</li>
<li>Object.assign方法用来将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign只拷贝自身属性，不可枚举的属性（enumerable为false）和继承的属性不会被拷贝。</li>
<li>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</li>
<li><strong>proto</strong>属性（前后各两个下划线），用来读取或设置当前对象的prototype对象。</li>
<li>Object.observe()，Object.unobserve()。</li>
<li>目前，ES7有一个提案，将rest参数/扩展运算符（…）引入对象。</li>
</ul>
<p>Symbol</p>
<ul>
<li>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</li>
<li>Symbol值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的Symbol类型。凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。<code>let s=Symbol();</code>。</li>
<li>Symbol值不能与其他类型的值进行运算，会报错。但是，Symbol值可以显式转为字符串。</li>
<li>注意，Symbol值作为对象属性名时，不能用点运算符。同理，在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。</li>
<li>Symbol作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有Symbol属性名。Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和Symbol键名。</li>
<li>Symbol.for方法接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。Symbol.keyFor方法返回一个已登记的Symbol类型值的key。</li>
<li>Symbol.hasInstance, Symbol.isConcatSpreadable,Symbol.replace,Symbol.search,Symbol.split,Symbol.iterator,Symbol.toPrimitive,Symbol.toStringTag,Symbol.unscopables</li>
</ul>
<p>Proxy和Reflect</p>
<ul>
<li>Proxy可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</li>
<li>Reflect对象与Proxy对象一样，也是ES6为了操作对象而提供的新API。将Object对象的一些明显属于语言层面的方法，放到Reflect对象上。</li>
</ul>
<p>Set Map</p>
<ul>
<li>Set,它类似于数组，但是成员的值都是唯一的，没有重复的值。Set内部判断两个值是否不同，使用的算法类似于精确相等运算符（===），这意味着，两个对象总是不相等的。</li>
<li>Array.from方法可以将Set结构转为数组。</li>
<li>由于Set结构没有键名，只有键值（或者说键名和键值是同一个值），所以key方法和value方法的行为完全一致。</li>
<li>WeakSet结构与Set类似，也是不重复的值的集合。但是，它与Set有两个区别。首先，WeakSet的成员只能是对象，而不能是其他类型的值。其次，WeakSet中的对象都是弱引用，即垃圾回收机制不考虑WeakSet对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于WeakSet之中。这个特点意味着，无法引用WeakSet的成员，因此WeakSet是不可遍历的。</li>
<li>ES6提供了Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>
<li>作为构造函数，Map也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</li>
<li>Map的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（clash）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。</li>
<li>set方法返回的是Map本身，因此可以采用链式写法。</li>
<li>WeakMap结构与Map结构基本类似，唯一的区别是它只接受对象作为键名（null除外），不接受其他类型的值作为键名，而且键名所指向的对象，不计入垃圾回收机制。</li>
<li>WeakMap与Map在API上的区别主要是两个，一是没有遍历操作（即没有key()、values()和entries()方法），也没有size属性；二是无法清空，即不支持clear方法。这与WeakMap的键不被计入引用、被垃圾回收机制忽略有关。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象的扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6允许在对象之中，只写属性名。这时，属性值等于属性名所代表的变量。除了属性简写，方法也可以简写。&lt;/li&gt;
&lt;li&gt;ES6允许字面量定义对象时，用表达式作为对象的属性名或方法名，即把表达式放在方括号内。&lt;strong&gt;注意，属性名表达式与简洁表示法，不能同时使用，会报错。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ES6 learning 二</title>
    <link href="http://memory.lulutia.com/2015/10/21/ES6-2/"/>
    <id>http://memory.lulutia.com/2015/10/21/ES6-2/</id>
    <published>2015-10-21T14:16:00.000Z</published>
    <updated>2017-07-12T04:45:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>字符串的扩展</p>
<ul>
<li>JavaScript可以用\uxxxx表示一个字符，但局限于\u0000–\uFFFF,超过就得用双字节。ES6对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</li>
</ul>
<a id="more"></a>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"\u&#123;20BB7&#125;"</span>    <span class="regexp">//</span> <span class="string">"𠮷"</span></div></pre></td></tr></table></figure>
<ul>
<li>JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。charAt方法无法读取字符，charCodeAt方法只能分别返回前两个字节和后两个字节的值。ES6提供了codePointAt方法，能够正确处理4个字节储存的字符，返回一个字符的码点。它的逆过程通过String.fromCodePoint实现，弥补了String.fromCharCode的溢出问题。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">charCodeAt -&gt; codePointAt</div><div class="line"><span class="built_in">String</span>.fromCharCode -&gt; <span class="built_in">String</span>.fromCodePoint</div></pre></td></tr></table></figure>
<ul>
<li>for..of遍历字符串，可以识别大于0xFFFF的码点，传统的for循环无法识别这样的码点。</li>
<li>ES7提供了字符串实例的at方法，可以识别Unicode编号大于0xFFFF的字符，返回正确的字符。</li>
<li>ES6提供String.prototype.normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为Unicode正规化。</li>
<li>includes(),startsWith(),endsWith(),repeat()</li>
<li>模板字符串：模板字符串（template string）是增强版的字符串，用反引号（`）标识。如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。模板字符串中嵌入变量，需要将变量名写在${}之中。使用&lt;%= … %&gt;输出JavaScript表达式。</li>
<li>标签模板：模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。</li>
<li>String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</li>
</ul>
<p>数值的扩展</p>
<ul>
<li>ES6提供了二进制和八进制数值的新的写法，分别用前缀0b和0o表示。</li>
<li>Number.isFinite(),Number.isNaN() 区别于全局的isFinite()与isNaN()，他们不调用Number()方法进行转换。</li>
<li>Number.parseInt(),Number.parseFloat()</li>
<li>Number.isInterger(),Number.EPSILON</li>
<li>Number.MAX_SAFE_INTERGER,Number.MIN_SAFE_INTERGER,Number.isSafeInteger()</li>
<li>Math新增的方法：<ul>
<li>Math.trunc()//去除小数部分，返回整数部分</li>
<li>Math.sign()//判断一个数到底是正数，负数，还是0</li>
<li>Math.cbrt()//计算一个数的立方根</li>
<li>Math.clz32()//Math.clz32方法返回一个数的32位无符号整数形式有多少个前导0</li>
<li>Math.imul()//Math.imul方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。主要解决的精度问题。</li>
<li>Math.fround()//返回一个数的单精度浮点数形式</li>
<li>Math.hypot()//返回所有参数的平方和的平方根</li>
<li>Math.expm1(),Math.log1p(),Math.log10(),Math.log2()</li>
<li>Math.sinh(x),Math.cosh(x),Math.tanh(x),Math.asinh(x),Math.acosh(x),Math.atanh(x)</li>
<li>ES7新增了一个指数运算符（<strong>）,```2 </strong> 3 = 2<em>2</em>2```。</li>
</ul>
</li>
</ul>
<p>数组的扩展</p>
<ul>
<li>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</li>
<li>扩展运算符（…）也可以将某些数据结构转为数组,<code>var args = [...arguments];</code>。</li>
<li>Array.of方法用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数Array()的不足。只有当参数个数不少于2个，Array()才会返回由参数组成的新数组。</li>
<li>copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</li>
<li>find()//直接返回数组元素；findIndex()//返回数组元素索引</li>
<li>fill方法使用给定值，填充一个数组。</li>
<li>数组实例的entries()，keys()和values()。</li>
<li>数组实例的includes()。</li>
<li>注意对数组的空位的处理变化了。</li>
<li><strong>数组推导</strong>[超级赞的功能]</li>
<li>Array.observe(),Array.unobserve()这两个方法用于监听（取消监听）数组的变化，指定回调函数。</li>
</ul>
<p>函数的扩展</p>
<ul>
<li>ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。<strong>指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数</strong>。参数默认值所处的作用域，不是全局作用域，而是函数作用域。参数变量是默认声明的，所以不能用let或const再次声明。</li>
<li>ES6引入rest参数（形式为“…变量名”），用于获取<strong>函数</strong>的多余参数，这样就不需要使用arguments对象了。<strong>所有数组特有的方法都可以用于这个变量</strong>。注意，rest参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。函数的length属性，不包括rest参数。</li>
<li>扩展运算符（spread）是三个点（…）。它好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。</li>
<li>函数的name属性，返回该函数的函数名。bind返回的函数，name属性值会加上“bound ”前缀。</li>
<li>ES6允许使用“箭头”（=&gt;）定义函数。<ul>
<li>函数体内的this对象，绑定定义时所在的对象，而不是使用时所在的对象。由于this在箭头函数中被绑定，所以不能用call()、apply()、bind()这些方法去改变this的指向。</li>
<li>不可以当作构造函数。</li>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>
</ul>
</li>
<li>函数绑定:函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。由于双冒号运算符返回的还是原对象，因此可以采用链式写法。</li>
<li>尾调用:指某个函数的最后一步是调用另一个函数。“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<strong>注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</strong>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。</li>
<li>ES7有一个提案，允许函数的最后一个参数有尾逗号（trailing comma）。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符串的扩展&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript可以用\uxxxx表示一个字符，但局限于\u0000–\uFFFF,超过就得用双字节。ES6对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的delete一探</title>
    <link href="http://memory.lulutia.com/2015/10/20/JavaScript-delete/"/>
    <id>http://memory.lulutia.com/2015/10/20/JavaScript-delete/</id>
    <published>2015-10-20T04:36:00.000Z</published>
    <updated>2017-07-12T04:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>核心内容借鉴自下面的<a href="http://perfectionkills.com/understanding-delete/" target="_blank" rel="external">网址</a></li>
</ul>
<a id="more"></a>
<ul>
<li><p>delete一般用法：</p>
<ul>
<li><p>删除对象的属性 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a=&#123;p:21&#125;;</div><div class="line">console.log(a.p);//21</div><div class="line">delete a.p;//true</div><div class="line">console.log(a.p);//undefined</div></pre></td></tr></table></figure>
</li>
<li><p>无法删除一般的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var x=13;</div><div class="line">console.log(x);//13</div><div class="line">delete x;//false</div><div class="line">console.log(x);//13</div></pre></td></tr></table></figure>
</li>
<li><p>无法删除函数 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var p=function()&#123;&#125;;</div><div class="line">delete p;//false</div><div class="line">typeof(p);//function</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>造成上述表现的原因</p>
<ul>
<li><p>在ECMAScript中，有三种可执行代码类型：全局代码、函数代码、eval代码。对于以上几种代码都有相应的执行上下文。每个执行上下文又对应有变量对象，<strong>在源代码中声明的变量和方法实际上都是作为属性被加入到与当前上下文相关联的这个对象当中</strong>。</p>
<ul>
<li><p>全局代码时：变量对象是全局对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    var global=33;</div><div class="line">    window.global;//33</div><div class="line">    global===window.global;//true</div><div class="line">    function uu()&#123;&#125;;</div><div class="line">    typeof window.uu;//&quot;function&quot;</div><div class="line">    window.uu===uu;//true</div><div class="line">    ``` </div><div class="line">    * 函数代码：此时有活动对象的概念。**在函数段中，并不是只有显式声明的变量和函数会成为活动对象的属性，对于每个函数中隐式存在的arguments对象（函数的参数列表）也是一样的**。</div><div class="line">    * eval函数：进入eval代码时并不会新建新的变量对象，而是沿用当前的环境。</div><div class="line">* 每一个变量属性都可以有以下任意多个属性: ReadOnly, DontEnum, DontDelete, Internal。在声明变量或者函数时，他们都变成了当前上下文对象的属性，这些属性在创建时 都带有DontDelete标记；但是显式或者隐式的赋值语句所产生的属性并不会带有这个标记。</div><div class="line">  </div><div class="line">```JavaScript:</div><div class="line">var test=1;</div><div class="line">delete test;//false</div><div class="line">test2 = 2;</div><div class="line">delete test2;//true</div><div class="line">```   </div><div class="line">* 一些内建的对象是自动持有DontDelete这个标记的，从而不能被删除，比如函数内的arguments，函数的传入参数以及函数的length属性。</div><div class="line">* 属性标记诸如DontDelete是在这个属性被创建的时候 产生的，之后对该属性的任何赋值都不会改变此属性的标记。</div><div class="line"></div><div class="line">```JavaScript:</div><div class="line">function y()&#123;&#125;;</div><div class="line">delete y;//false</div><div class="line">y=1;</div><div class="line">delete y;//false</div><div class="line">typeof y;//&quot;number&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在eval中声明的变量创建时都不会带有DontDelete标记,在函数内部也一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eval(&apos;var ii=34;&apos;);</div><div class="line">delete ii;//true</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在Firebug控制台中的代码最终将通过eval执行，而不是作为全局代码或函数代码。</p>
</li>
<li>IE6-8中的问题：<ul>
<li>通过全局this变量去删除属性(delete this.x)总会出错</li>
<li>直接删除该属性(delete x)时：<ul>
<li>如果x是通过全局this赋值产生会(this.x=1)导致错误；</li>
<li>如果x通过显式声明创建(var x=1)则delete会像我们预料的那样无法删除并返回false；</li>
<li>如果x通过非声明式赋值创建(x=1)则delete可以正常删除。</li>
</ul>
</li>
<li>原因： “IE的全局变量对象是通过JScript实现，而一般的全局变量是由host实现的。”</li>
</ul>
</li>
<li>对于宿主对象而言，delete操作的结果是不可预料的。因为宿主对象根据不同浏览器的实现允许有不同的行为，这其中包括了delete。</li>
<li>strict mode采用了更主动并且描述性的方法，而不是简单的忽略无效的删除操作。(比如平常删除一个不存在的变量会return true;但使用严格模式后会报错。)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;核心内容借鉴自下面的&lt;a href=&quot;http://perfectionkills.com/understanding-delete/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>面试回忆360</title>
    <link href="http://memory.lulutia.com/2015/10/15/memory1/"/>
    <id>http://memory.lulutia.com/2015/10/15/memory1/</id>
    <published>2015-10-15T12:38:00.000Z</published>
    <updated>2017-07-12T04:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>  一大早就跑南京去面360，完全高铁当公交的节奏……但是，我穷啊＝＝。总的来说面的特别的不好，还不是自己弱，怪谁啊，稍微纪录下吧。</p>
<a id="more"></a>
<p>  <strong>岗位：web前端工程师</strong></p>
<ul>
<li>笔试题还记得吗？</li>
<li>会哪些语言？</li>
<li>啥叫面向对象？</li>
<li>算法和数据结构怎么样？</li>
<li>用JavaScript手写一个排序。</li>
<li>学过哪些课程？这个课程教了些啥？</li>
<li>操作系统熟吗？</li>
<li>计算机如何实现减法的？</li>
<li>数据库熟吗？了解哪些数据库？</li>
<li>说一下数据库范式？</li>
<li>说一下tcp/IP分层模型。</li>
<li>说一下tcp三次握手协议。</li>
<li>说一下应用层中的协议对应的网络层的协议。</li>
<li>在TCP/IP协议中如何实现的IP的映射。</li>
<li>说一下对JavaScript原型链的理解。</li>
<li>用代码实现js中的继承。</li>
<li>说一下对闭包的理解。让写程序实现一个计时器每隔一秒按顺序输出1-60中的一个值。</li>
<li>说一下对作用域的理解，然后给了个程序，问输出。</li>
<li>ECMAScript有哪些新变化。</li>
<li>ECMAScript5最近加了哪些属性。</li>
<li>现在主流的是ECMAScript几。</li>
<li>如何理解html的语义化。</li>
<li>css的选择器有哪些？</li>
<li>有哪些行内元素标签？</li>
<li>一行两个div，第一个固宽，用css实现后面的自适应。</li>
<li>实现知道长宽的div的垂直居中。</li>
<li><p>问了些项目相关。</p>
<p>————————————————————————————————————————————————————————————————<br>总的感觉是他们希望招全栈工程师，当然我自己弱也是事实，os的确没系统的学过，数据库和网络学的太久远了忘记的差不多了，c++那些快两年没用过了也是退化的很严重啊。当然之前没想到前端会面这些所以也没系统的复习＝＝<br>打算工作决定后用接下来的半年好好系统的整理下整个计算机的知识，维护一个完整的知识网络。因为觉得这个还是很重要的一件事情。<br>最后提问阶段，我问了两个问题：</p>
</li>
<li>其一，刚才面试问的很宽泛，问题还没说完，面试官来了一句：我不问你这些问你哪些……，（其实我想说的是他们怎么看待重要性的问题的……）伤不起。</li>
<li>知趣的问第二个问题，你们那边主要用什么技术，面试官来了一句：还不就是那一套……（我真心没法描述我当时心里的状况）……我接着说比如node这些会涉及吗？他来了句当然会涉及各种技术，比如可能进去会写PHP啊，总之大概意思就是全栈是趋势blabla。</li>
</ul>
<p>嘛～只能说不适合啰；我对计算机基础知识的掌握达不到面试官的要求，同样面试官对我提问的回答也达不到我的预期。不过还是给学校丢人了(大哭状)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  一大早就跑南京去面360，完全高铁当公交的节奏……但是，我穷啊＝＝。总的来说面的特别的不好，还不是自己弱，怪谁啊，稍微纪录下吧。&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="面试" scheme="http://memory.lulutia.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>(数据结构与算法JavaScript描述)读书笔记</title>
    <link href="http://memory.lulutia.com/2015/10/13/note-structure01/"/>
    <id>http://memory.lulutia.com/2015/10/13/note-structure01/</id>
    <published>2015-10-13T08:06:00.000Z</published>
    <updated>2017-07-12T04:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组</p>
<ul>
<li>判断是否数组：Array.isArray(sth);</li>
<li>[]创建数组的效率比Array构造函数高;</li>
<li>浅复制 VS 深复制；</li>
<li>字符串生成数组:split();数组的字符串表示:join()/toString()</li>
<li>sort()是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型的，按照数字大小进行排序的一般如下：</li>
</ul>
<a id="more"></a>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">(num1,num2)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 - num2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">88</span>];</div><div class="line">nums.sort(compare);</div></pre></td></tr></table></figure>
<ul>
<li>迭代器方法: forEach();every();some();reduce()–累加；reduceRight();map();filter()–返回一个新数组，该数组包含应用该函数后结果为true的<strong>元素</strong>;</li>
<li>创建多维数组的一般办法</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">matrix</span>(numrows,numcols,initial)&#123;</div><div class="line">    <span class="built_in">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; numrows; i++)&#123;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">columns</span> = [];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> j = <span class="number">0</span>; j &lt; numcols; j++)&#123;</div><div class="line">            <span class="built_in">columns</span>[j] = initial;</div><div class="line">        &#125;</div><div class="line">        arr[i] = <span class="built_in">columns</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>列表</p>
<ul>
<li>如果数据结构非常复杂。列表的作用就没有那么大了。</li>
<li>如果数据储存的顺序不重要，也不必对数据进行查找，那么列表就很好。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">function List()&#123;</div><div class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span>;<span class="comment">//列表长度</span></div><div class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span>;<span class="comment">//列表的当前位置</span></div><div class="line">    <span class="keyword">this</span>.dataStore = [];<span class="comment">//初始化一个空数组来保存列表元素</span></div><div class="line">    <span class="keyword">this</span>.clear = clear;</div><div class="line">    <span class="keyword">this</span>.find = find;</div><div class="line">    <span class="keyword">this</span>.toString = toString;</div><div class="line">    <span class="keyword">this</span>.insert = insert;</div><div class="line">    <span class="keyword">this</span>.append = append;</div><div class="line">    <span class="keyword">this</span>.remove = remove;</div><div class="line">    <span class="keyword">this</span>.front = front;</div><div class="line">    <span class="keyword">this</span>.end = end;</div><div class="line">    <span class="keyword">this</span>.prev = prev;</div><div class="line">    <span class="keyword">this</span>.next = next;</div><div class="line">    <span class="keyword">this</span>.length = length;</div><div class="line">    <span class="keyword">this</span>.currPos = currPos;</div><div class="line">    <span class="keyword">this</span>.moveTo = moveTo;</div><div class="line">    <span class="keyword">this</span>.getElement = getElement;</div><div class="line">    <span class="keyword">this</span>.contains = contains;</div><div class="line">&#125;</div><div class="line">function append(element)&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.listSize++] = element;</div><div class="line">&#125;</div><div class="line">function find(element)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i &lt; <span class="keyword">this</span>.dataStore.lenhgth;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.dataStore[i] == element)&#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line">function remove(element)&#123;</div><div class="line">    <span class="keyword">var</span> foundAt = <span class="keyword">this</span>.find(element);</div><div class="line">    <span class="keyword">if</span>(foundAt &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.dataStore.splice(found,<span class="number">1</span>);</div><div class="line">        --<span class="keyword">this</span>.listSize;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">function length()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize;</div><div class="line">&#125;</div><div class="line">function toString()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore;</div><div class="line">&#125;</div><div class="line">function insert(element, after)&#123;</div><div class="line">    <span class="keyword">var</span> insertPos = <span class="keyword">this</span>.find(after);</div><div class="line">    <span class="keyword">if</span>(insertPos &gt; <span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">this</span>.dataStore.splice(insertPos+<span class="number">1</span>, <span class="number">0</span>, element);</div><div class="line">        ++<span class="keyword">this</span>.listSize;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">function clear()&#123;</div><div class="line">    delete <span class="keyword">this</span>.dataStore;<span class="comment">//关于delete的用法重启一章描述</span></div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.listSize = <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">function contains(element)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.dataStore.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.dataStore[i] == element)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line">function front()&#123;</div><div class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">function end()&#123;</div><div class="line">    <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">function prev()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.pos &gt; <span class="number">0</span>)&#123;</div><div class="line">        --<span class="keyword">this</span>.pos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function next()&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.pos&lt;<span class="keyword">this</span>.listSize<span class="number">-1</span>)&#123;</div><div class="line">        ++<span class="keyword">this</span>.pos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function currPos()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos;</div><div class="line">&#125;</div><div class="line">function moveTo(position)&#123;</div><div class="line">    <span class="keyword">this</span>.pos = position;</div><div class="line">&#125;</div><div class="line">function getElement()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.pos];</div><div class="line">&#125;</div><div class="line">迭代器：</div><div class="line"><span class="keyword">var</span> names = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">for</span>(names.front();names.currPos()&lt;names.length();names.next())&#123;</div><div class="line">    console.log(names.getElement());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>栈<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.top = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.push = push;</div><div class="line">    <span class="keyword">this</span>.pop = pop;</div><div class="line">    <span class="keyword">this</span>.peek = peek;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">(element)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top++] = element;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[--<span class="keyword">this</span>.top];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dataStore[<span class="keyword">this</span>.top<span class="number">-1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.top;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.dataStore;<span class="comment">//关于delete的用法重启一章描述</span></div><div class="line">    <span class="keyword">this</span>.dataStore = [];</div><div class="line">    <span class="keyword">this</span>.top = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>将数字转化为二至九进制的数字</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function mulBase(<span class="built_in">num</span>, base)&#123;</div><div class="line">    <span class="built_in">var</span> s = <span class="built_in">new</span> Stack();</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        s.<span class="built_in">push</span>(num%base);</div><div class="line">        <span class="built_in">num</span> = Math.<span class="built_in">floor</span>(<span class="built_in">num</span>/=base);</div><div class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">num</span>&gt;<span class="number">0</span>);</div><div class="line">    <span class="built_in">var</span> converted = <span class="string">""</span>;</div><div class="line">    <span class="keyword">while</span>(s.<span class="built_in">length</span>()&gt;<span class="number">0</span>)&#123;</div><div class="line">        converter += s.<span class="built_in">pop</span>();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> converted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>回文判断</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span><span class="params">(word)</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> Stack();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;word.length; i++)&#123;</div><div class="line">        s.push(word[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> rword = <span class="string">""</span>;</div><div class="line">    <span class="keyword">while</span>(s.lenght()&gt;<span class="number">0</span>)&#123;</div><div class="line">        rword += s.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(word == rword)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断是否数组：Array.isArray(sth);&lt;/li&gt;
&lt;li&gt;[]创建数组的效率比Array构造函数高;&lt;/li&gt;
&lt;li&gt;浅复制 VS 深复制；&lt;/li&gt;
&lt;li&gt;字符串生成数组:split();数组的字符串表示:join()/toString()&lt;/li&gt;
&lt;li&gt;sort()是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型的，按照数字大小进行排序的一般如下：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="算法" scheme="http://memory.lulutia.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-JavaScript实现part2</title>
    <link href="http://memory.lulutia.com/2015/10/12/leetcode2/"/>
    <id>http://memory.lulutia.com/2015/10/12/leetcode2/</id>
    <published>2015-10-12T10:09:00.000Z</published>
    <updated>2017-07-12T04:46:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>其他见part1<br>Merge Two Sorted Lists</p>
<ul>
<li><a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">https://leetcode.com/problems/merge-two-sorted-lists/</a></li>
<li>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</li>
</ul>
<a id="more"></a>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * function ListNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.next = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;ListNode&#125; l1</div><div class="line"> * @param &#123;ListNode&#125; l2</div><div class="line"> * @return &#123;ListNode&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> mergeTwoLists = function(l1, l2) &#123;</div><div class="line">    <span class="keyword">var</span> resultNode = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> result = resultNode;</div><div class="line">    <span class="keyword">if</span>(l1===<span class="literal">null</span>&amp;&amp;l2===<span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(l1!==<span class="literal">null</span>||l2!==<span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(l1===<span class="literal">null</span>)&#123;</div><div class="line">            result.<span class="keyword">val</span> = l2.<span class="keyword">val</span>;</div><div class="line">            l2 = l2.next;</div><div class="line">            <span class="keyword">if</span>(l2!==<span class="literal">null</span>)&#123;</div><div class="line">            result.next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</div><div class="line">            result = result.next;&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l2===<span class="literal">null</span>)&#123;</div><div class="line">            result.<span class="keyword">val</span> = l1.<span class="keyword">val</span>;</div><div class="line">            l1 = l1.next;</div><div class="line">            <span class="keyword">if</span>(l1!==<span class="literal">null</span>)&#123;</div><div class="line">            result.next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</div><div class="line">            result = result.next;&#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(l1.<span class="keyword">val</span>&lt;=l2.<span class="keyword">val</span>)&#123;</div><div class="line">                result.<span class="keyword">val</span> = l1.<span class="keyword">val</span>;</div><div class="line">                l1 = l1.next;</div><div class="line">                <span class="keyword">if</span>(l1!==<span class="literal">null</span>||l2!==<span class="literal">null</span>)&#123;</div><div class="line">                result.next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</div><div class="line">                result = result.next;&#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                result.<span class="keyword">val</span> = l2.<span class="keyword">val</span>;</div><div class="line">                l2 = l2.next;</div><div class="line">                <span class="keyword">if</span>(l1!==<span class="literal">null</span>||l2!==<span class="literal">null</span>)&#123;</div><div class="line">                result.next = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</div><div class="line">                result = result.next;&#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resultNode;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Remove Duplicates from Sorted Array</p>
<ul>
<li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="external">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a></li>
<li>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.<ul>
<li>Do not allocate extra space for another array, you must do this in place with constant memory.</li>
<li>For example,</li>
<li>Given input array nums = [1,1,2],</li>
<li>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</li>
</ul>
</li>
<li>注意返回的是length</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number[]&#125; nums</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">var</span> removeDuplicates = function(nums) &#123;</div><div class="line">    <span class="keyword">if</span>(nums.<span class="built_in">length</span>===<span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(nums.<span class="built_in">length</span>===<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">return</span> nums.<span class="built_in">length</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">1</span> ;i&lt;nums.<span class="built_in">length</span>;i++)&#123;</div><div class="line">       <span class="keyword">if</span>(nums[i]===nums[i-<span class="number">1</span>])&#123;</div><div class="line">           nums.<span class="built_in">splice</span>(i,<span class="number">1</span>);</div><div class="line">           i = i-<span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> nums.<span class="built_in">length</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Remove Element</p>
<ul>
<li><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="external">https://leetcode.com/problems/remove-element/</a></li>
<li>Given an array and a value, remove all instances of that value in place and return the new length.The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;<span class="built_in">number</span>[]&#125; nums</div><div class="line"> * @param &#123;<span class="built_in">number</span>&#125; val</div><div class="line"> * @<span class="literal">return</span> &#123;<span class="built_in">number</span>&#125;</div><div class="line"> */</div><div class="line">var removeElement = function(nums, val) &#123;</div><div class="line">    var <span class="built_in">count</span> = nums.<span class="built_in">length</span>;</div><div class="line">    <span class="keyword">if</span>(nums.<span class="built_in">length</span>===<span class="number">0</span>)&#123;</div><div class="line"><span class="built_in">        return</span> null;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(var i=<span class="number">0</span>; i&lt;nums.<span class="built_in">length</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[i]===val)&#123;</div><div class="line">            nums.splice(i,<span class="number">1</span>);</div><div class="line">            i = i<span class="number">-1</span>;</div><div class="line">            <span class="built_in">count</span> = <span class="built_in">count</span><span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="built_in">    return</span> <span class="built_in">count</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Implement strStr()</p>
<ul>
<li><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="external">https://leetcode.com/problems/implement-strstr/</a></li>
<li>mplement strStr().Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;<span class="built_in">string</span>&#125; haystack</div><div class="line"> * @param &#123;<span class="built_in">string</span>&#125; needle</div><div class="line"> * @<span class="literal">return</span> &#123;<span class="built_in">number</span>&#125;</div><div class="line"> */</div><div class="line">var strStr = function(haystack, needle) &#123;</div><div class="line">    <span class="keyword">if</span>(haystack.<span class="built_in">length</span>&lt;needle.<span class="built_in">length</span>)&#123;</div><div class="line"><span class="built_in">        return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(haystack.<span class="built_in">length</span>===<span class="number">0</span>&amp;&amp;needle.<span class="built_in">length</span>&gt;<span class="number">0</span>)&#123;</div><div class="line"><span class="built_in">        return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"><span class="built_in">    return</span> haystack.indexOf(needle);</div><div class="line">    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Valid Sudoku</p>
<ul>
<li><a href="https://leetcode.com/problems/valid-sudoku/" target="_blank" rel="external">https://leetcode.com/problems/valid-sudoku/</a></li>
<li>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">Sudoku Puzzles - The Rules</a>.The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</li>
<li>Note:A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</li>
<li>简单的说确认是否是有效的数独。即满足每一行、每一列、每一个粗线宫内的数字均含1-9，不重复。</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;character[][]&#125; board</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">var</span> isValidSudoku = function(board) &#123;</div><div class="line">    <span class="built_in">var</span> array3 = [];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> q=<span class="number">0</span>;q&lt;<span class="number">3</span>;q++)&#123;</div><div class="line">            array3[q] = [];</div><div class="line">            <span class="keyword">for</span>(<span class="built_in">var</span> f=<span class="number">0</span> ; f&lt;<span class="number">3</span>;f++)&#123;</div><div class="line">            array3[q][f] = [];&#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">array</span> = [];</div><div class="line">        <span class="built_in">var</span> array2 = [];</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</div><div class="line">            <span class="built_in">var</span> fir = parseInt(i/<span class="number">3</span>);</div><div class="line">            <span class="built_in">var</span> <span class="built_in">sec</span> = parseInt(j/<span class="number">3</span>);</div><div class="line">            <span class="keyword">if</span>(array3[fir][<span class="built_in">sec</span>].indexOf(board[i][j])!==-<span class="number">1</span>&amp;&amp;board[i][j]!==<span class="string">"."</span>)&#123;</div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>.indexOf(board[i][j])!==-<span class="number">1</span>&amp;&amp;board[i][j]!==<span class="string">"."</span>)&#123;</div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(array2.indexOf(board[j][i])!==-<span class="number">1</span>&amp;&amp;board[j][i]!==<span class="string">"."</span>)&#123;</div><div class="line">                <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                array3[fir][<span class="built_in">sec</span>].<span class="built_in">push</span>(board[i][j]);</div><div class="line">                <span class="built_in">array</span>.<span class="built_in">push</span>(board[i][j]);</div><div class="line">                array2.<span class="built_in">push</span>(board[j][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Length of Last Word</p>
<ul>
<li><a href="https://leetcode.com/problems/length-of-last-word/" target="_blank" rel="external">https://leetcode.com/problems/length-of-last-word/</a></li>
<li>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.If the last word does not exist, return 0.<ul>
<li>Note: A word is defined as a character sequence consists of non-space characters only.</li>
<li>For example, Given s = “Hello World”,return 5.</li>
</ul>
</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line">// <span class="built_in">var</span> lengthOfLastWord = function(s) &#123;</div><div class="line">//     s = s.trim();</div><div class="line">//     <span class="keyword">if</span>(s[s.<span class="built_in">length</span>-<span class="number">1</span>]===<span class="string">" "</span>)&#123;<span class="built_in">return</span> <span class="number">0</span>;&#125;</div><div class="line">//     <span class="built_in">var</span> arr = s.<span class="built_in">split</span>(<span class="string">" "</span>);</div><div class="line">//     <span class="built_in">return</span> arr[arr.<span class="built_in">length</span>-<span class="number">1</span>].<span class="built_in">length</span>;</div><div class="line">// &#125;;</div><div class="line">// 上面这种效率太低了</div><div class="line"><span class="built_in">var</span> lengthOfLastWord = function(s) &#123;</div><div class="line">    s = s.trim();</div><div class="line">    <span class="keyword">if</span>(s[s.<span class="built_in">length</span>-<span class="number">1</span>]===<span class="string">" "</span>)&#123;<span class="built_in">return</span> <span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=s.<span class="built_in">length</span>-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">        <span class="keyword">if</span>(s[i]===<span class="string">" "</span>)&#123;</div><div class="line">            <span class="built_in">return</span> s.<span class="built_in">length</span>-<span class="number">1</span>-i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> s.<span class="built_in">length</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Plus One</p>
<ul>
<li><a href="https://leetcode.com/problems/plus-one/" target="_blank" rel="external">https://leetcode.com/problems/plus-one/</a></li>
<li>Given a non-negative number represented as an array of digits, plus one to the number.The digits are stored such that the most significant digit is at the head of the list.</li>
</ul>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;number[]&#125; <span class="keyword">digits</span></div><div class="line"> * @<span class="keyword">return</span> &#123;number[]&#125;</div><div class="line"> */</div><div class="line"> //之前用字符串parseInt来做会越界</div><div class="line">var plusOne = <span class="keyword">function</span>(<span class="keyword">digits</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">digits</span>.length===<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> [<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">   <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;<span class="keyword">digits</span>.length;i++)&#123;</div><div class="line">       <span class="keyword">if</span>(<span class="keyword">digits</span>[<span class="keyword">digits</span>.length-i-<span class="number">1</span>]+<span class="number">1</span>&gt;=<span class="number">10</span>)&#123;</div><div class="line">           <span class="keyword">digits</span>[<span class="keyword">digits</span>.length-i-<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">           <span class="keyword">if</span>(<span class="keyword">digits</span>.length-i-<span class="number">1</span>-<span class="number">1</span>&lt;<span class="number">0</span>)&#123;</div><div class="line">               <span class="keyword">digits</span>.unshift(<span class="number">1</span>);</div><div class="line">               <span class="keyword">return</span> <span class="keyword">digits</span>;</div><div class="line">           &#125;</div><div class="line">           flag = <span class="literal">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">digits</span>[<span class="keyword">digits</span>.length-i-<span class="number">1</span>]=<span class="keyword">digits</span>[<span class="keyword">digits</span>.length-i-<span class="number">1</span>]+<span class="number">1</span>;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">digits</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Climbing Stairs</p>
<ul>
<li><a href="https://leetcode.com/problems/climbing-stairs/" target="_blank" rel="external">https://leetcode.com/problems/climbing-stairs/</a></li>
<li>You are climbing a stair case. It takes n steps to reach to the top.Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</li>
<li>测试可知，其实是一个斐波拉契数列n为1，2，3，4，5时，结果为1，2，3，5，8.</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; n</div><div class="line"> * <span class="doctag">@return</span> &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span><span class="params">(n)</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(n===<span class="number">2</span>)&#123;<span class="keyword">return</span> b;&#125;</div><div class="line">        <span class="keyword">if</span>(n===<span class="number">1</span>)&#123;<span class="keyword">return</span> a;&#125;</div><div class="line">        <span class="keyword">var</span> sum;</div><div class="line">        n -= <span class="number">2</span>;</div><div class="line">        <span class="keyword">while</span>(n--)&#123;</div><div class="line">            sum = a+b;</div><div class="line">            a = b;</div><div class="line">            b = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> step(n);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Remove Duplicates from Sorted List</p>
<ul>
<li><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="external">https://leetcode.com/problems/remove-duplicates-from-sorted-list/</a></li>
<li>Given a sorted linked list, delete all duplicates such that each element appear only once.<ul>
<li>For example,</li>
<li>Given 1-&gt;1-&gt;2, return 1-&gt;2.</li>
<li>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</li>
</ul>
</li>
<li>注意的点：处理最后一位如果为重复的情况,所以放了一个暂时变量tmp，因为链表是有序的，所以只需要对比head的下一个与result的最后一个是否一样。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * function ListNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.next = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;ListNode&#125; head</div><div class="line"> * <span class="doctag">@return</span> &#123;ListNode&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> deleteDuplicates = function(head) &#123;</div><div class="line">    <span class="keyword">if</span>(head===<span class="literal">null</span>)&#123;<span class="keyword">return</span> [];&#125;</div><div class="line">    <span class="keyword">var</span> outNode = new ListNode(<span class="number">0</span>);</div><div class="line">    <span class="keyword">var</span> result = outNode;</div><div class="line">    result.<span class="keyword">val</span> = head.<span class="keyword">val</span>;</div><div class="line">    <span class="keyword">while</span>(head.next!==<span class="literal">null</span>)&#123;</div><div class="line">        <span class="keyword">var</span> tmp = head.next;</div><div class="line">        <span class="keyword">if</span>(tmp.<span class="keyword">val</span>!==result.<span class="keyword">val</span>)&#123;</div><div class="line">            result.next = new ListNode(<span class="number">0</span>);</div><div class="line">            result = result.next;</div><div class="line">            result.<span class="keyword">val</span> = tmp.<span class="keyword">val</span>;</div><div class="line">            head = head.next</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            head = head.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> outNode;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Merge Sorted Array</p>
<ul>
<li><a href="https://leetcode.com/problems/merge-sorted-array/" target="_blank" rel="external">https://leetcode.com/problems/merge-sorted-array/</a></li>
<li>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.<ul>
<li>Note:You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</li>
</ul>
</li>
<li>注意的点：<ul>
<li>可能数组中有0，但是0是不计入数量的，所以最好一开始就将不符合长度的值去掉。</li>
<li>另外需要处理nums1已经遍历完了，但是nums2还有剩的情况，直接将nums2剩下的加入nums1中，因为本来他们两个就是有序的。</li>
<li>注意不要return。</li>
<li>splice的用法好好体会，记得是在第一个值之前插入。</li>
</ul>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;number[]&#125; nums1</div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; m</div><div class="line"> * <span class="doctag">@param</span> &#123;number[]&#125; nums2</div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; n</div><div class="line"> * <span class="doctag">@return</span> &#123;void&#125; Do not return anything, modify nums1 in-place instead.</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span><span class="params">(nums1, m, nums2, n)</span> </span>&#123;</div><div class="line">    nums1.splice(m);</div><div class="line">    nums2.splice(n);</div><div class="line">    <span class="keyword">var</span> pp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=pp;j&lt;m;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(nums2[i]&lt;=nums1[j])&#123;</div><div class="line">                <span class="keyword">if</span>(j===<span class="number">0</span>)&#123;</div><div class="line">                    nums1.unshift(nums2[i]);</div><div class="line">                    pp = j + <span class="number">1</span>;</div><div class="line">                    m = m + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    nums1.splice(j,<span class="number">0</span>,nums2[i]);</div><div class="line">                    pp = j+<span class="number">1</span>;</div><div class="line">                    m = m + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j&gt;=m)&#123;nums1.push(nums2[i])&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其他见part1&lt;br&gt;Merge Two Sorted Lists&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-two-sorted-lists/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://leetcode.com/problems/merge-two-sorted-lists/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://memory.lulutia.com/categories/Algorithm/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="算法" scheme="http://memory.lulutia.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6 learning</title>
    <link href="http://memory.lulutia.com/2015/10/11/ES6/"/>
    <id>http://memory.lulutia.com/2015/10/11/ES6/</id>
    <published>2015-10-11T14:38:00.000Z</published>
    <updated>2017-07-12T04:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Environment Prepare</p>
<ul>
<li><p>Bable</p>
<ul>
<li>node –harmony</li>
<li>node –v8-options | grep harmony</li>
<li>npm install –global babel</li>
<li>babel-node</li>
<li>babel-node es6.js</li>
<li>babel es6.js -o es5.js</li>
<li>babel -d build-dir source-dir</li>
<li>babel -d build-dir source-dir -s</li>
<li><p>use Bable in browser:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/babel-core/browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="actionscript"></span></div><div class="line"><span class="comment">// Your ES6 code</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<a id="more"></a>    
<ul>
<li><p>Traceur</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!-- 加载Traceur编译器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://google.github.io/traceur-compiler/bin/traceur.js"</span></span></div><div class="line">        <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 将Traceur编译器用于网页 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://google.github.io/traceur-compiler/src/bootstrap.js"</span></span></div><div class="line">        <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;<span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 打开实验选项，否则有些特性可能编译不成功 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">        traceur.options.experimental = <span class="literal">true</span>;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="actionscript"></span></div><div class="line">  <span class="comment">//Your ES6 code</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>npm install -g traceur</li>
<li>traceur es6.js</li>
<li>traceur –script es6.js –out es5.js  –experimental</li>
</ul>
</li>
</ul>
<p>Some commands</p>
<ul>
<li>let <ul>
<li>块级作用域</li>
<li>不存在变量提升</li>
<li>暂时性死区[在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）]</li>
<li>不允许重复声明</li>
<li>块级作用域外部，无法调用块级作用域内部定义的函数</li>
</ul>
</li>
<li>const<ul>
<li>声明后不可变</li>
<li>同样是块级作用域，不提升，有暂时性死区，不可重复声明</li>
<li>const命令只是指向变量所在的地址，所以将一个对象声明为常量必须非常小心，因为可以改变其属性</li>
<li>对对象冻结：Object.freeze</li>
</ul>
</li>
<li>ES6规定，var命令和function命令声明的全局变量，属于全局对象的属性；let命令、const命令、class命令声明的全局变量，不属于全局对象的属性。</li>
</ul>
<p>跨模块常量：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">export XXX</span></div><div class="line">-----</div><div class="line"><span class="section">import * as XXX from XXX</span></div><div class="line">-----</div><div class="line">import &#123;XXX&#125; from XXX</div></pre></td></tr></table></figure></p>
<p>变量的解构赋值</p>
<ul>
<li>如果解构不成功，变量的值就等于undefined</li>
<li>解构赋值允许指定默认值</li>
<li>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错,解构不仅可以用于数组，还可以用于对象</li>
<li>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值</li>
<li>不能使用圆括号的情况<ul>
<li>变量声明语句中，模式不能带有圆括号</li>
<li>函数参数中，模式不能带有圆括号</li>
<li>不能将整个模式，或嵌套模式中的一层，放在圆括号之中</li>
</ul>
</li>
<li>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号</li>
</ul>
<p>Iterator</p>
<ul>
<li>Waiting</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Environment Prepare&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;node –harmony&lt;/li&gt;
&lt;li&gt;node –v8-options | grep harmony&lt;/li&gt;
&lt;li&gt;npm install –global babel&lt;/li&gt;
&lt;li&gt;babel-node&lt;/li&gt;
&lt;li&gt;babel-node es6.js&lt;/li&gt;
&lt;li&gt;babel es6.js -o es5.js&lt;/li&gt;
&lt;li&gt;babel -d build-dir source-dir&lt;/li&gt;
&lt;li&gt;babel -d build-dir source-dir -s&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use Bable in browser:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;node_modules/babel-core/browser.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Your ES6 code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-JavaScript实现</title>
    <link href="http://memory.lulutia.com/2015/10/11/leetcode/"/>
    <id>http://memory.lulutia.com/2015/10/11/leetcode/</id>
    <published>2015-10-11T10:22:00.000Z</published>
    <updated>2017-07-12T04:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>找工作找的心伤，碰上今年这个动荡的互联网就业年份，刷题安抚下情绪＝＝,然后发现n久之前刷过的几道都过期了，看不到当时的解决了……算了，这次还是存个档吧。</p>
<a id="more"></a>
<p>Add Two Numbers</p>
<ul>
<li><a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="external">https://leetcode.com/problems/add-two-numbers/</a></li>
<li>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.<ul>
<li>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li>
<li>Output: 7 -&gt; 0 -&gt; 8</li>
</ul>
</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * function ListNode(val) &#123;</div><div class="line"> *     this.val = val;</div><div class="line"> *     this.next = null;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;ListNode&#125; l1</div><div class="line"> * @param &#123;ListNode&#125; l2</div><div class="line"> * @return &#123;ListNode&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">var</span> addTwoNumbers = function(l1, l2) &#123;</div><div class="line">    <span class="built_in">var</span> resultNode = <span class="literal">new</span> ListNode(<span class="number">0</span>);</div><div class="line">    <span class="built_in">var</span> result = resultNode;</div><div class="line">    <span class="built_in">var</span> <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(l1===<span class="built_in">null</span>&amp;&amp;l2===<span class="built_in">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(l1!==<span class="built_in">null</span>||l2!==<span class="built_in">null</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(l1!==<span class="built_in">null</span>)&#123;</div><div class="line">            <span class="keyword">sum</span> = <span class="keyword">sum</span>+l1.val;</div><div class="line">            l1 = l1.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l2!==<span class="built_in">null</span>)&#123;</div><div class="line">            <span class="keyword">sum</span> = <span class="keyword">sum</span>+l2.val;</div><div class="line">            l2 = l2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">sum</span>&gt;<span class="number">9</span>)&#123;</div><div class="line">            result.val = <span class="keyword">sum</span><span class="number">-10</span>;</div><div class="line">            result.next = <span class="literal">new</span> ListNode(<span class="number">1</span>);</div><div class="line">            result = result.next;</div><div class="line">            <span class="keyword">sum</span> = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            result.val = <span class="keyword">sum</span>;</div><div class="line">            <span class="keyword">if</span>(l1!==<span class="built_in">null</span>||l2!==<span class="built_in">null</span>)&#123;</div><div class="line">            result.next = <span class="literal">new</span> ListNode(<span class="number">0</span>);</div><div class="line">            result = result.next;</div><div class="line">            <span class="keyword">sum</span> = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resultNode;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Longest Substring Without Repeating Characters：</p>
<ul>
<li><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="external">https://leetcode.com/problems/longest-substring-without-repeating-characters/</a></li>
<li>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param &#123;<span class="built_in">string</span>&#125; s</div><div class="line"> * @<span class="literal">return</span> &#123;<span class="built_in">number</span>&#125;</div><div class="line"> */</div><div class="line">var lengthOfLongestSubstring = function(s) &#123;</div><div class="line">    var <span class="built_in">item</span> = <span class="string">""</span>;</div><div class="line">    var num=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(var i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">item</span>.indexOf(s[i])===<span class="number">-1</span>)&#123;</div><div class="line">        <span class="built_in">item</span> = <span class="built_in">item</span> + s[i];</div><div class="line">        var len = <span class="built_in">item</span>.<span class="built_in">length</span>;</div><div class="line">            <span class="keyword">if</span> (len&gt;num)&#123;</div><div class="line">                num = len;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            var index = <span class="built_in">item</span>.indexOf(s[i]);</div><div class="line">            <span class="built_in">item</span> = <span class="built_in">item</span>.substr(index+<span class="number">1</span>);</div><div class="line">            <span class="built_in">item</span> = <span class="built_in">item</span>+s[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="built_in">    return</span> num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ZigZag Conversion</p>
<ul>
<li><a href="https://leetcode.com/problems/zigzag-conversion/" target="_blank" rel="external">https://leetcode.com/problems/zigzag-conversion/</a></li>
<li>简单的说就是从左边开始不停画Z字型路线，然后从上部读取字母拼成输出。</li>
<li>后来网上找了下，<a href="http://fisherlei.blogspot.com/2013/01/leetcode-zigzag-conversion.html" target="_blank" rel="external">这个孩子</a>的分析思路和我的基本一样。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;string&#125; s</div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; numRows</div><div class="line"> * <span class="doctag">@return</span> &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> convert = function(s, numRows) &#123;</div><div class="line">    <span class="keyword">if</span>(s===<span class="string">""</span>||numRows&lt;<span class="number">1</span>||s===<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="string">""</span>&#125;</div><div class="line">    <span class="keyword">if</span>(numRows===<span class="number">1</span>)&#123;<span class="keyword">return</span> s&#125;</div><div class="line">    <span class="keyword">if</span>(s.length&lt;=numRows)&#123;<span class="keyword">return</span> s&#125;</div><div class="line">    <span class="keyword">var</span> step = <span class="number">2</span>*numRows - <span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> output=<span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;numRows; i++ )&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i; j&lt;s.length; j=j+step)&#123;</div><div class="line">            output += s[j];</div><div class="line">            <span class="keyword">if</span>(i!==<span class="number">0</span>&amp;&amp;i!==(numRows<span class="number">-1</span>))&#123;</div><div class="line">                <span class="keyword">var</span> minStep = step - i*<span class="number">2</span>;</div><div class="line">                <span class="keyword">if</span>((j+minStep)&lt;s.length)&#123;</div><div class="line">                output += s[j+minStep];&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Reverse Integer</p>
<ul>
<li><a href="https://leetcode.com/problems/reverse-integer/" target="_blank" rel="external">https://leetcode.com/problems/reverse-integer/</a></li>
<li>Reverse digits of an integer.<ul>
<li>Example1: x = 123, return 321</li>
<li>Example2: x = -123, return -321</li>
</ul>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> &#123;number&#125; x</div><div class="line"> * <span class="doctag">@return</span> &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> reverse = function(x) &#123;</div><div class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span></div><div class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</div><div class="line">        flag = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    x = Math.abs(x);</div><div class="line">    <span class="keyword">var</span> str = x+ <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">out</span> = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</div><div class="line">        <span class="keyword">out</span> += str[str.length-i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">out</span> = parseInt(<span class="keyword">out</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">out</span> &gt; Number.parseInt(<span class="string">"1111111111111111111111111111111"</span>, <span class="number">2</span>))&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</div><div class="line">    <span class="keyword">if</span>(flag)&#123;</div><div class="line">        <span class="keyword">out</span> = -<span class="keyword">out</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">out</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>String to Integer (atoi)</p>
<ul>
<li><a href="https://leetcode.com/problems/string-to-integer-atoi/" target="_blank" rel="external">https://leetcode.com/problems/string-to-integer-atoi/</a></li>
<li>Implement atoi to convert a string to an integer.<ul>
<li>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</li>
<li>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</li>
</ul>
</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; str</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line">var myAtoi = function(<span class="keyword">str</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">str</span>.length === <span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line">    var <span class="keyword">count</span> = <span class="number">0</span>;</div><div class="line">    var flag = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">str</span> = <span class="keyword">str</span>.trim();</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">str</span>[<span class="number">0</span>]===<span class="string">"+"</span>||<span class="keyword">str</span>[<span class="number">0</span>]===<span class="string">"-"</span>)&#123;</div><div class="line">        flag = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(isNaN(parseInt(<span class="keyword">str</span>[<span class="number">1</span>])))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag)&#123;</div><div class="line">        <span class="keyword">for</span>(var i=<span class="number">1</span> ; i&lt;<span class="keyword">str</span>.length;i++)&#123;</div><div class="line">             <span class="keyword">if</span>(isNaN(parseInt(<span class="keyword">str</span>[i])))&#123;</div><div class="line">                <span class="keyword">str</span> = <span class="keyword">str</span>.substr(<span class="number">0</span>,i);</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">for</span>(var j=<span class="number">0</span> ; j&lt;<span class="keyword">str</span>.length;j++)&#123;</div><div class="line">             <span class="keyword">if</span>(isNaN(parseInt(<span class="keyword">str</span>[j]))&amp;&amp;j!==<span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">str</span> = <span class="keyword">str</span>.substr(<span class="number">0</span>,j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(isNaN(parseInt(<span class="keyword">str</span>[j]))&amp;&amp;j===<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(parseInt(<span class="keyword">str</span>)&lt;<span class="number">-2147483648</span>) &#123;<span class="keyword">return</span> <span class="number">-2147483648</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(parseInt(<span class="keyword">str</span>)&gt; <span class="number">2147483647</span>) &#123;<span class="keyword">return</span> <span class="number">2147483647</span>;&#125;</div><div class="line">    <span class="keyword">return</span> parseInt(<span class="keyword">str</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Palindrome Number</p>
<ul>
<li><a href="https://leetcode.com/problems/palindrome-number/" target="_blank" rel="external">https://leetcode.com/problems/palindrome-number/</a></li>
<li>Determine whether an integer is a palindrome. Do this without extra space.</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; x</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</div><div class="line">var isPalindrome = function(x) &#123;</div><div class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    var <span class="keyword">str</span> = x + <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">str</span>.length===<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">str</span>.length%<span class="number">2</span>===<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(var i=<span class="number">0</span>; i&lt;(<span class="keyword">str</span>.length/<span class="number">2</span>); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">str</span>[i]!==<span class="keyword">str</span>[<span class="keyword">str</span>.length<span class="number">-1</span>-i])&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(var j=<span class="number">0</span>; j&lt;((<span class="keyword">str</span>.length+<span class="number">1</span>)/<span class="number">2</span>)<span class="number">-1</span>;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">str</span>[j]!==<span class="keyword">str</span>[<span class="keyword">str</span>.length-j<span class="number">-1</span>])&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Roman to Integer</p>
<ul>
<li><a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">https://leetcode.com/problems/roman-to-integer/</a></li>
<li>Given a roman numeral, convert it to an integer.Input is guaranteed to be within the range from 1 to 3999.</li>
<li>题目没写具体的罗马数规律，查了一下，如下：<a href="http://blog.csdn.net/wzy_1988/article/details/17057929" target="_blank" rel="external">罗马数规律</a></li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string&#125; s</div><div class="line"> * @return &#123;number&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">var</span> romanToInt = function(s) &#123;</div><div class="line">    <span class="built_in">var</span> <span class="built_in">num</span> = [];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>; i&lt;s.<span class="built_in">length</span>; i++)&#123;</div><div class="line">        switch(s[i])&#123;</div><div class="line">            case <span class="string">"I"</span>:</div><div class="line">                <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">1</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"V"</span>:</div><div class="line">                <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">5</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"X"</span>:</div><div class="line">               <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">10</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"L"</span>:</div><div class="line">                <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">50</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"C"</span>:</div><div class="line">               <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">100</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"D"</span>:</div><div class="line">                <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">500</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            case <span class="string">"M"</span>:</div><div class="line">                <span class="built_in">num</span>.<span class="built_in">push</span>(<span class="number">1000</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>.<span class="built_in">length</span>===<span class="number">0</span>)&#123;<span class="built_in">return</span> <span class="number">0</span>;&#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>.<span class="built_in">length</span>===<span class="number">1</span>)&#123;<span class="built_in">return</span> <span class="built_in">num</span>[<span class="number">0</span>];&#125;</div><div class="line">    <span class="built_in">var</span> <span class="built_in">sum</span> = <span class="built_in">num</span>[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> j=<span class="number">1</span> ;j&lt;<span class="built_in">num</span>.<span class="built_in">length</span>;j++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">num</span>[j]&lt;=<span class="built_in">num</span>[j-<span class="number">1</span>])&#123;</div><div class="line">            <span class="built_in">sum</span> += <span class="built_in">num</span>[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">sum</span> = <span class="built_in">sum</span> - <span class="number">2</span>*<span class="built_in">num</span>[j-<span class="number">1</span>] + <span class="built_in">num</span>[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="built_in">sum</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Longest Common Prefix</p>
<ul>
<li><a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">https://leetcode.com/problems/longest-common-prefix/</a></li>
<li>Write a function to find the longest common prefix string amongst an array of strings.</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;string[]&#125; strs</div><div class="line"> * @return &#123;string&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">var</span> longestCommonPrefix = function(strs) &#123;</div><div class="line">    <span class="keyword">if</span>(strs.<span class="built_in">length</span>===<span class="number">0</span>)&#123;<span class="built_in">return</span> <span class="string">""</span>;&#125;</div><div class="line">    <span class="built_in">var</span> short=strs[<span class="number">0</span>].<span class="built_in">length</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;strs.<span class="built_in">length</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(strs[i].<span class="built_in">length</span>&lt;short)&#123;</div><div class="line">            short = strs[i].<span class="built_in">length</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">var</span> pre = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> j=<span class="number">0</span>;j&lt;short;j++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">var</span> k=<span class="number">1</span>;k&lt;strs.<span class="built_in">length</span>;k++)&#123;</div><div class="line">            <span class="keyword">if</span>(strs[k][j]!==strs[k-<span class="number">1</span>][j])&#123;</div><div class="line">                <span class="built_in">return</span> pre;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        pre = pre + strs[<span class="number">0</span>][j];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> pre;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;找工作找的心伤，碰上今年这个动荡的互联网就业年份，刷题安抚下情绪＝＝,然后发现n久之前刷过的几道都过期了，看不到当时的解决了……算了，这次还是存个档吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://memory.lulutia.com/categories/Algorithm/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="算法" scheme="http://memory.lulutia.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>留档：Node学习脚印一</title>
    <link href="http://memory.lulutia.com/2015/10/11/Node1/"/>
    <id>http://memory.lulutia.com/2015/10/11/Node1/</id>
    <published>2015-10-11T10:21:00.000Z</published>
    <updated>2017-07-12T04:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>资料准备部分</p>
<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li>深入浅出Node.js</li>
</ul>
<a id="more"></a>
<p>Node入门部分<br>目标：</p>
<ul>
<li>用户通过浏览器使用此应用。</li>
<li>当用户请求<a href="http://domain/start时，可以看到一个欢迎页面，页面上有一个文件上传的表单。" target="_blank" rel="external">http://domain/start时，可以看到一个欢迎页面，页面上有一个文件上传的表单。</a></li>
<li>用户可以选择一个图片并提交表单，随后文件将被上传到<a href="http://domain/upload，该页面完成上传后会把图片显示在页面上。" target="_blank" rel="external">http://domain/upload，该页面完成上传后会把图片显示在页面上。</a></li>
</ul>
<p>模块分析：</p>
<ul>
<li>Web页面：HTTP服务器</li>
<li>不同的URL：路由</li>
<li>请求处理程序</li>
<li>上传数据</li>
<li>保存展示数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"><span class="keyword">var</span> requestHandlers = <span class="built_in">require</span>(<span class="string">"./requestHandlers"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> handle = &#123;&#125;;</div><div class="line">handle[<span class="string">"/"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/start"</span>] = requestHandlers.start;</div><div class="line">handle[<span class="string">"/upload"</span>] = requestHandlers.upload;</div><div class="line">handle[<span class="string">"/show"</span>] = requestHandlers.show;</div><div class="line"></div><div class="line">server.start(router.router, handle);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//server.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = &#123;&#125;;</div><div class="line">server.start = <span class="function"><span class="keyword">function</span>(<span class="params">router, handle</span>)</span>&#123;</div><div class="line">    http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> pathname = url.parse(req.url).pathname;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received"</span>);</div><div class="line">        router(handle, pathname, res, req);        </div><div class="line">    &#125;).listen(<span class="number">8124</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Server running at http://127.0.0.1:8124/"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = server;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//router.js</span></div><div class="line"><span class="keyword">var</span> router = &#123;&#125;;</div><div class="line">router.router = <span class="function"><span class="keyword">function</span>(<span class="params">handle, pathname, res, req</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">"function"</span>)&#123;</div><div class="line">        handle[pathname](res, req);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"no router "</span> + pathname);</div><div class="line">        res.writeHead(<span class="number">404</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">        res.write(<span class="string">"404 Not found"</span>);</div><div class="line">        res.end();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//requestHandlers.js</span></div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">"formidable"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> requestHandlers = &#123;&#125;;</div><div class="line">requestHandlers.start = <span class="function"><span class="keyword">function</span>(<span class="params">res, req</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> body = <span class="string">'&lt;html&gt;'</span>+</div><div class="line">          <span class="string">'&lt;head&gt;'</span>+</div><div class="line">          <span class="string">'&lt;meta http-equiv="Content-Type" '</span>+</div><div class="line">          <span class="string">'content="text/html; charset=UTF-8" /&gt;'</span>+</div><div class="line">          <span class="string">'&lt;/head&gt;'</span>+</div><div class="line">          <span class="string">'&lt;body&gt;'</span>+</div><div class="line">          <span class="string">'&lt;form action="/upload" enctype="multipart/form-data" '</span>+</div><div class="line">          <span class="string">'method="post"&gt;'</span>+</div><div class="line">          <span class="string">'&lt;input type="file" name="upload"&gt;'</span>+</div><div class="line">          <span class="string">'&lt;input type="submit" value="Upload file" /&gt;'</span>+</div><div class="line">          <span class="string">'&lt;/form&gt;'</span>+</div><div class="line">          <span class="string">'&lt;/body&gt;'</span>+</div><div class="line">          <span class="string">'&lt;/html&gt;'</span>;</div><div class="line"></div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">        res.write(body);</div><div class="line">        res.end();</div><div class="line">&#125;</div><div class="line">requestHandlers.upload = <span class="function"><span class="keyword">function</span>(<span class="params">res, req</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"upload"</span>);</div><div class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm();</div><div class="line">    form.parse(req, <span class="function"><span class="keyword">function</span>(<span class="params">error, fields, files</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"parsing done"</span>);</div><div class="line">        fs.renameSync(files.upload.path, <span class="string">"/tmp/test.png"</span>);</div><div class="line">        res.writeHead(<span class="string">"200"</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</div><div class="line">        res.write(<span class="string">"received image:&lt;br/&gt;"</span>);</div><div class="line">        res.write(<span class="string">"&lt;img src='/show' /&gt;"</span>);</div><div class="line">        res.end();</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">requestHandlers.show = <span class="function"><span class="keyword">function</span>(<span class="params">res, postData</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"SHOW"</span>);</div><div class="line">    fs.readFile(<span class="string">"/tmp/test.png"</span>, <span class="string">"binary"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(error)&#123;</div><div class="line">            res.writeHead(<span class="number">500</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</div><div class="line">            res.write(error + <span class="string">"\n"</span>);</div><div class="line">            res.end();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>&#125;);</div><div class="line">            res.write(file, <span class="string">"binary"</span>);</div><div class="line">            res.end();</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = requestHandlers;</div></pre></td></tr></table></figure>
<p>注意点</p>
<ul>
<li>阻塞和非阻塞的问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;资料准备部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nodebeginner.org/index-zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;深入浅出Node.js&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://memory.lulutia.com/categories/technology/"/>
    
    
      <category term="前端" scheme="http://memory.lulutia.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="计算机" scheme="http://memory.lulutia.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
</feed>
